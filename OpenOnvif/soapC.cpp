/* soapC.cpp
   Generated by gSOAP 2.8.78 for IMyService.h

gSOAP XML Web services tools
Copyright (C) 2000-2018, Robert van Engelen, Genivia Inc. All Rights Reserved.
The soapcpp2 tool and its generated software are released under the GPL.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

#if defined(__BORLANDC__)
#pragma option push -w-8060
#pragma option push -w-8004
#endif

#include "soapH.h"

SOAP_SOURCE_STAMP("@(#) soapC.cpp ver 2.8.78 2019-02-04 13:36:32 GMT")


#ifndef WITH_NOGLOBAL

SOAP_FMAC3 int SOAP_FMAC4 soap_getheader(struct soap *soap)
{
	soap->part = SOAP_IN_HEADER;
	soap->header = soap_in_SOAP_ENV__Header(soap, "SOAP-ENV:Header", soap->header, NULL);
	soap->part = SOAP_END_HEADER;
	return soap->header == NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putheader(struct soap *soap)
{
	if (soap->version && soap->header)
	{	soap->part = SOAP_IN_HEADER;
		if (soap_out_SOAP_ENV__Header(soap, "SOAP-ENV:Header", 0, soap->header, ""))
			return soap->error;
		soap->part = SOAP_END_HEADER;
	}
	return SOAP_OK;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serializeheader(struct soap *soap)
{
	if (soap->version && soap->header)
		soap_serialize_SOAP_ENV__Header(soap, soap->header);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_header(struct soap *soap)
{
	if (soap->header == NULL)
	{	if ((soap->header = soap_new_SOAP_ENV__Header(soap)))
			soap_default_SOAP_ENV__Header(soap, soap->header);
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_fault(struct soap *soap)
{
	if (soap->fault == NULL)
	{	soap->fault = soap_new_SOAP_ENV__Fault(soap, -1);
		if (soap->fault == NULL)
			return;
	}
	if (soap->version == 2 && soap->fault->SOAP_ENV__Code == NULL)
		soap->fault->SOAP_ENV__Code = soap_new_SOAP_ENV__Code(soap, -1);
	if (soap->version == 2 && soap->fault->SOAP_ENV__Reason == NULL)
		soap->fault->SOAP_ENV__Reason = soap_new_SOAP_ENV__Reason(soap, -1);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serializefault(struct soap *soap)
{
	if (soap->fault)
		soap_serialize_SOAP_ENV__Fault(soap, soap->fault);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putfault(struct soap *soap)
{
	if (soap->fault)
		return soap_put_SOAP_ENV__Fault(soap, soap->fault, "SOAP-ENV:Fault", "");
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_getfault(struct soap *soap)
{
	return (soap->fault = soap_get_SOAP_ENV__Fault(soap, NULL, "SOAP-ENV:Fault", NULL)) == NULL;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->fault == NULL)
		return NULL;
	if (soap->version == 2 && soap->fault->SOAP_ENV__Code)
		return (const char**)(void*)&soap->fault->SOAP_ENV__Code->SOAP_ENV__Value;
	return (const char**)(void*)&soap->fault->faultcode;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultsubcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->fault == NULL)
		return NULL;
	if (soap->version == 2 && soap->fault->SOAP_ENV__Code)
	{	if (soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode == NULL)
		{	soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode = soap_new_SOAP_ENV__Code(soap, -1);
			if (soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode == NULL)
				return NULL;
		}
		return (const char**)(void*)&soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode->SOAP_ENV__Value;
	}
	return (const char**)(void*)&soap->fault->faultcode;
}

SOAP_FMAC3 const char * SOAP_FMAC4 soap_fault_subcode(struct soap *soap)
{
	const char **s = soap_faultsubcode(soap);
	return s ? *s : NULL;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultstring(struct soap *soap)
{
	soap_fault(soap);
	if (soap->fault == NULL)
		return NULL;
	if (soap->version == 2 && soap->fault->SOAP_ENV__Reason)
		return (const char**)(void*)&soap->fault->SOAP_ENV__Reason->SOAP_ENV__Text;
	return (const char**)(void*)&soap->fault->faultstring;
}

SOAP_FMAC3 const char * SOAP_FMAC4 soap_fault_string(struct soap *soap)
{
	const char **s = soap_faultstring(soap);
	return s ? *s : NULL;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultdetail(struct soap *soap)
{
	soap_fault(soap);
	if (soap->fault == NULL)
		return NULL;
	if (soap->version == 2)
	{	if (soap->fault->SOAP_ENV__Detail == NULL)
			soap->fault->SOAP_ENV__Detail = soap_new_SOAP_ENV__Detail(soap, -1);
		return (const char**)(void*)&soap->fault->SOAP_ENV__Detail->__any;
	}
	if (soap->fault->detail == NULL)
		soap->fault->detail = soap_new_SOAP_ENV__Detail(soap, -1);
	return (const char**)(void*)&soap->fault->detail->__any;
}

SOAP_FMAC3 const char * SOAP_FMAC4 soap_fault_detail(struct soap *soap)
{
	const char **s = soap_faultdetail(soap);
	return s ? *s : NULL;
}

#endif

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap *soap)
{
	int t;
	if (soap->version == 1)
	{	for (;;)
		{	if (!soap_getelement(soap, NULL, &t))
				if ((soap->error && soap->error != SOAP_TAG_MISMATCH) || soap_ignore_element(soap))
					break;
		}
	}
	if (soap->error == SOAP_NO_TAG || soap->error == SOAP_EOF)
		soap->error = SOAP_OK;
	return soap->error;
}
#endif

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void * SOAP_FMAC4 soap_getelement(struct soap *soap, const char *tag, int *type)
{	(void)type;
	if (soap_peek_element(soap))
		return NULL;
#ifndef WITH_NOIDREF
	if (!*soap->id || !(*type = soap_lookup_type(soap, soap->id)))
		*type = soap_lookup_type(soap, soap->href);
	switch (*type)
	{
	case SOAP_TYPE_byte:
		return soap_in_byte(soap, tag, NULL, "xsd:byte");
	case SOAP_TYPE_int:
		return soap_in_int(soap, tag, NULL, "xsd:int");
	case SOAP_TYPE_double:
		return soap_in_double(soap, tag, NULL, "xsd:double");
	case SOAP_TYPE_ns2__TEnumTest:
		return soap_in_ns2__TEnumTest(soap, tag, NULL, "ns2:TEnumTest");
	case SOAP_TYPE_std__string:
		return soap_in_std__string(soap, tag, NULL, "xsd:string");
	case SOAP_TYPE_ns2__TPilotData:
		return soap_in_ns2__TPilotData(soap, tag, NULL, "ns2:TPilotData");
	case SOAP_TYPE_ns2__TMyEmployee:
		return soap_in_ns2__TMyEmployee(soap, tag, NULL, "ns2:TMyEmployee");
	case SOAP_TYPE_TDoubleArray:
		return soap_in_TDoubleArray(soap, tag, NULL, "xsd:double");
	case SOAP_TYPE_ns3__echoPilotData:
		return soap_in_ns3__echoPilotData(soap, tag, NULL, "ns3:echoPilotData");
	case SOAP_TYPE_ns3__echoPilotDataResponse:
		return soap_in_ns3__echoPilotDataResponse(soap, tag, NULL, "ns3:echoPilotDataResponse");
	case SOAP_TYPE_ns3__echoDouble:
		return soap_in_ns3__echoDouble(soap, tag, NULL, "ns3:echoDouble");
	case SOAP_TYPE_ns3__echoDoubleResponse:
		return soap_in_ns3__echoDoubleResponse(soap, tag, NULL, "ns3:echoDoubleResponse");
	case SOAP_TYPE_ns3__echoMyEmployee:
		return soap_in_ns3__echoMyEmployee(soap, tag, NULL, "ns3:echoMyEmployee");
	case SOAP_TYPE_ns3__echoMyEmployeeResponse:
		return soap_in_ns3__echoMyEmployeeResponse(soap, tag, NULL, "ns3:echoMyEmployeeResponse");
	case SOAP_TYPE_ns3__echoDoubleArray:
		return soap_in_ns3__echoDoubleArray(soap, tag, NULL, "ns3:echoDoubleArray");
	case SOAP_TYPE_ns3__echoDoubleArrayResponse:
		return soap_in_ns3__echoDoubleArrayResponse(soap, tag, NULL, "ns3:echoDoubleArrayResponse");
	case SOAP_TYPE_ns3__echoEnum:
		return soap_in_ns3__echoEnum(soap, tag, NULL, "ns3:echoEnum");
	case SOAP_TYPE_ns3__echoEnumResponse:
		return soap_in_ns3__echoEnumResponse(soap, tag, NULL, "ns3:echoEnumResponse");
	case SOAP_TYPE_PointerTons2__TPilotData:
		return soap_in_PointerTons2__TPilotData(soap, tag, NULL, "ns2:TPilotData");
	case SOAP_TYPE_PointerTons2__TMyEmployee:
		return soap_in_PointerTons2__TMyEmployee(soap, tag, NULL, "ns2:TMyEmployee");
	case SOAP_TYPE_PointerToTDoubleArray:
		return soap_in_PointerToTDoubleArray(soap, tag, NULL, "xsd:double");
	case SOAP_TYPE_PointerTodouble:
		return soap_in_PointerTodouble(soap, tag, NULL, "xsd:double");
	case SOAP_TYPE__QName:
	{	char **s;
		s = soap_in__QName(soap, tag, NULL, "xsd:QName");
		return s ? *s : NULL;
	}
	case SOAP_TYPE_string:
	{	char **s;
		s = soap_in_string(soap, tag, NULL, "xsd:string");
		return s ? *s : NULL;
	}
	default:
#else
	*type = 0;
#endif
	{	const char *t = soap->type;
		if (!*t)
			t = soap->tag;
		if (!soap_match_tag(soap, t, "xsd:string"))
		{	*type = SOAP_TYPE_std__string;
			return soap_in_std__string(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns2:TPilotData"))
		{	*type = SOAP_TYPE_ns2__TPilotData;
			return soap_in_ns2__TPilotData(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns2:TMyEmployee"))
		{	*type = SOAP_TYPE_ns2__TMyEmployee;
			return soap_in_ns2__TMyEmployee(soap, tag, NULL, NULL);
		}
		if (*soap->arrayType && !soap_match_array(soap, "xsd:double"))
		{	*type = SOAP_TYPE_TDoubleArray;
			return soap_in_TDoubleArray(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:byte"))
		{	*type = SOAP_TYPE_byte;
			return soap_in_byte(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:int"))
		{	*type = SOAP_TYPE_int;
			return soap_in_int(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:double"))
		{	*type = SOAP_TYPE_double;
			return soap_in_double(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns2:TEnumTest"))
		{	*type = SOAP_TYPE_ns2__TEnumTest;
			return soap_in_ns2__TEnumTest(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns3:echoPilotData"))
		{	*type = SOAP_TYPE_ns3__echoPilotData;
			return soap_in_ns3__echoPilotData(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns3:echoPilotDataResponse"))
		{	*type = SOAP_TYPE_ns3__echoPilotDataResponse;
			return soap_in_ns3__echoPilotDataResponse(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns3:echoDouble"))
		{	*type = SOAP_TYPE_ns3__echoDouble;
			return soap_in_ns3__echoDouble(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns3:echoDoubleResponse"))
		{	*type = SOAP_TYPE_ns3__echoDoubleResponse;
			return soap_in_ns3__echoDoubleResponse(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns3:echoMyEmployee"))
		{	*type = SOAP_TYPE_ns3__echoMyEmployee;
			return soap_in_ns3__echoMyEmployee(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns3:echoMyEmployeeResponse"))
		{	*type = SOAP_TYPE_ns3__echoMyEmployeeResponse;
			return soap_in_ns3__echoMyEmployeeResponse(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns3:echoDoubleArray"))
		{	*type = SOAP_TYPE_ns3__echoDoubleArray;
			return soap_in_ns3__echoDoubleArray(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns3:echoDoubleArrayResponse"))
		{	*type = SOAP_TYPE_ns3__echoDoubleArrayResponse;
			return soap_in_ns3__echoDoubleArrayResponse(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns3:echoEnum"))
		{	*type = SOAP_TYPE_ns3__echoEnum;
			return soap_in_ns3__echoEnum(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns3:echoEnumResponse"))
		{	*type = SOAP_TYPE_ns3__echoEnumResponse;
			return soap_in_ns3__echoEnumResponse(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:QName"))
		{	char **s;
			*type = SOAP_TYPE__QName;
			s = soap_in__QName(soap, tag, NULL, NULL);
			return s ? *s : NULL;
		}
		if (!soap_match_tag(soap, t, "xsd:string"))
		{	char **s;
			*type = SOAP_TYPE_string;
			s = soap_in_string(soap, tag, NULL, NULL);
			return s ? *s : NULL;
		}
		t = soap->tag;
#ifndef WITH_NOIDREF
	}
#endif
	}
	soap->error = SOAP_TAG_MISMATCH;
	return NULL;
}

#ifdef __cplusplus
}
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap *soap)
{
	if (!soap_peek_element(soap))
	{	int t;
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Unexpected element '%s' in input (level = %u, %d)\n", soap->tag, soap->level, soap->body));
		if (soap->mustUnderstand && !soap->other && !soap->fignore)
			return soap->error = SOAP_MUSTUNDERSTAND;
		if (((soap->mode & SOAP_XML_STRICT) && !soap->fignore && soap->part != SOAP_IN_HEADER) || !soap_match_tag(soap, soap->tag, "SOAP-ENV:"))
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "REJECTING element '%s'\n", soap->tag));
			return soap->error = SOAP_TAG_MISMATCH;
		}
		if (!*soap->id || !soap_getelement(soap, NULL, &t))
		{	soap->peeked = 0;
			if (soap->fignore)
				soap->error = soap->fignore(soap, soap->tag);
			else
				soap->error = SOAP_OK;
			DBGLOG(TEST, if (!soap->error) SOAP_MESSAGE(fdebug, "IGNORING element '%s'\n", soap->tag));
			if (!soap->error && soap->body && soap_ignore(soap))
				return soap->error;
		}
	}
	return soap->error;
}

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap *soap)
{
	int i;
	struct soap_plist *pp;
	if (soap->version == 1 && soap->encodingStyle && !(soap->mode & (SOAP_XML_TREE | SOAP_XML_GRAPH)))
		for (i = 0; i < SOAP_PTRHASH; i++)
			for (pp = soap->pht[i]; pp; pp = pp->next)
				if (pp->mark1 == 2 || pp->mark2 == 2)
					if (soap_putelement(soap, pp->ptr, SOAP_MULTIREFTAG, pp->id, pp->type))
						return soap->error;
	return SOAP_OK;
}
#endif

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap *soap, const void *ptr, const char *tag, int id, int type)
{	(void)tag;
	switch (type)
	{
	case SOAP_TYPE_byte:
		return soap_out_byte(soap, tag, id, (const char *)ptr, "xsd:byte");
	case SOAP_TYPE_int:
		return soap_out_int(soap, tag, id, (const int *)ptr, "xsd:int");
	case SOAP_TYPE_double:
		return soap_out_double(soap, tag, id, (const double *)ptr, "xsd:double");
	case SOAP_TYPE_ns2__TEnumTest:
		return soap_out_ns2__TEnumTest(soap, tag, id, (const enum ns2__TEnumTest *)ptr, "ns2:TEnumTest");
	case SOAP_TYPE_std__string:
		return soap_out_std__string(soap, tag, id, (const std::string *)ptr, "xsd:string");
	case SOAP_TYPE_ns2__TPilotData:
		return ((ns2__TPilotData *)ptr)->soap_out(soap, tag, id, "ns2:TPilotData");
	case SOAP_TYPE_ns2__TMyEmployee:
		return ((ns2__TMyEmployee *)ptr)->soap_out(soap, tag, id, "ns2:TMyEmployee");
	case SOAP_TYPE_TDoubleArray:
		return ((TDoubleArray *)ptr)->soap_out(soap, tag, id, "xsd:double");
	case SOAP_TYPE_ns3__echoPilotData:
		return soap_out_ns3__echoPilotData(soap, tag, id, (const struct ns3__echoPilotData *)ptr, "ns3:echoPilotData");
	case SOAP_TYPE_ns3__echoPilotDataResponse:
		return soap_out_ns3__echoPilotDataResponse(soap, tag, id, (const struct ns3__echoPilotDataResponse *)ptr, "ns3:echoPilotDataResponse");
	case SOAP_TYPE_ns3__echoDouble:
		return soap_out_ns3__echoDouble(soap, tag, id, (const struct ns3__echoDouble *)ptr, "ns3:echoDouble");
	case SOAP_TYPE_ns3__echoDoubleResponse:
		return soap_out_ns3__echoDoubleResponse(soap, tag, id, (const struct ns3__echoDoubleResponse *)ptr, "ns3:echoDoubleResponse");
	case SOAP_TYPE_ns3__echoMyEmployee:
		return soap_out_ns3__echoMyEmployee(soap, tag, id, (const struct ns3__echoMyEmployee *)ptr, "ns3:echoMyEmployee");
	case SOAP_TYPE_ns3__echoMyEmployeeResponse:
		return soap_out_ns3__echoMyEmployeeResponse(soap, tag, id, (const struct ns3__echoMyEmployeeResponse *)ptr, "ns3:echoMyEmployeeResponse");
	case SOAP_TYPE_ns3__echoDoubleArray:
		return soap_out_ns3__echoDoubleArray(soap, tag, id, (const struct ns3__echoDoubleArray *)ptr, "ns3:echoDoubleArray");
	case SOAP_TYPE_ns3__echoDoubleArrayResponse:
		return soap_out_ns3__echoDoubleArrayResponse(soap, tag, id, (const struct ns3__echoDoubleArrayResponse *)ptr, "ns3:echoDoubleArrayResponse");
	case SOAP_TYPE_ns3__echoEnum:
		return soap_out_ns3__echoEnum(soap, tag, id, (const struct ns3__echoEnum *)ptr, "ns3:echoEnum");
	case SOAP_TYPE_ns3__echoEnumResponse:
		return soap_out_ns3__echoEnumResponse(soap, tag, id, (const struct ns3__echoEnumResponse *)ptr, "ns3:echoEnumResponse");
	case SOAP_TYPE_PointerTons2__TPilotData:
		return soap_out_PointerTons2__TPilotData(soap, tag, id, (ns2__TPilotData *const*)ptr, "ns2:TPilotData");
	case SOAP_TYPE_PointerTons2__TMyEmployee:
		return soap_out_PointerTons2__TMyEmployee(soap, tag, id, (ns2__TMyEmployee *const*)ptr, "ns2:TMyEmployee");
	case SOAP_TYPE_PointerToTDoubleArray:
		return soap_out_PointerToTDoubleArray(soap, tag, id, (TDoubleArray *const*)ptr, "xsd:double");
	case SOAP_TYPE_PointerTodouble:
		return soap_out_PointerTodouble(soap, tag, id, (double *const*)ptr, "xsd:double");
	case SOAP_TYPE__QName:
		return soap_out_string(soap, tag, id, (char*const*)(void*)&ptr, "xsd:QName");
	case SOAP_TYPE_string:
		return soap_out_string(soap, tag, id, (char*const*)(void*)&ptr, "xsd:string");
	case 0:
		return SOAP_OK;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_putelement '%s' failed for type %d in soapC.cpp\n", tag ? tag : "", type));
	return soap_element_empty(soap, tag); /* unknown type to serialize */
}
#ifdef __cplusplus
}
#endif

#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap *soap, const void *ptr, int type)
{
	(void)soap; (void)ptr; (void)type; /* appease -Wall -Werror */
	switch (type)
	{
	case SOAP_TYPE_std__string:
		soap_serialize_std__string(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE_ns2__TPilotData:
		((ns2__TPilotData *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns2__TMyEmployee:
		((ns2__TMyEmployee *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_TDoubleArray:
		((TDoubleArray *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns3__echoPilotData:
		soap_serialize_ns3__echoPilotData(soap, (const struct ns3__echoPilotData *)ptr);
		break;
	case SOAP_TYPE_ns3__echoPilotDataResponse:
		soap_serialize_ns3__echoPilotDataResponse(soap, (const struct ns3__echoPilotDataResponse *)ptr);
		break;
	case SOAP_TYPE_ns3__echoDouble:
		soap_serialize_ns3__echoDouble(soap, (const struct ns3__echoDouble *)ptr);
		break;
	case SOAP_TYPE_ns3__echoDoubleResponse:
		soap_serialize_ns3__echoDoubleResponse(soap, (const struct ns3__echoDoubleResponse *)ptr);
		break;
	case SOAP_TYPE_ns3__echoMyEmployee:
		soap_serialize_ns3__echoMyEmployee(soap, (const struct ns3__echoMyEmployee *)ptr);
		break;
	case SOAP_TYPE_ns3__echoMyEmployeeResponse:
		soap_serialize_ns3__echoMyEmployeeResponse(soap, (const struct ns3__echoMyEmployeeResponse *)ptr);
		break;
	case SOAP_TYPE_ns3__echoDoubleArray:
		soap_serialize_ns3__echoDoubleArray(soap, (const struct ns3__echoDoubleArray *)ptr);
		break;
	case SOAP_TYPE_ns3__echoDoubleArrayResponse:
		soap_serialize_ns3__echoDoubleArrayResponse(soap, (const struct ns3__echoDoubleArrayResponse *)ptr);
		break;
	case SOAP_TYPE_ns3__echoEnum:
		soap_serialize_ns3__echoEnum(soap, (const struct ns3__echoEnum *)ptr);
		break;
	case SOAP_TYPE_ns3__echoEnumResponse:
		soap_serialize_ns3__echoEnumResponse(soap, (const struct ns3__echoEnumResponse *)ptr);
		break;
	case SOAP_TYPE_PointerTons2__TPilotData:
		soap_serialize_PointerTons2__TPilotData(soap, (ns2__TPilotData *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons2__TMyEmployee:
		soap_serialize_PointerTons2__TMyEmployee(soap, (ns2__TMyEmployee *const*)ptr);
		break;
	case SOAP_TYPE_PointerToTDoubleArray:
		soap_serialize_PointerToTDoubleArray(soap, (TDoubleArray *const*)ptr);
		break;
	case SOAP_TYPE_PointerTodouble:
		soap_serialize_PointerTodouble(soap, (double *const*)ptr);
		break;
	case SOAP_TYPE__QName:
		soap_serialize_string(soap, (char*const*)(void*)&ptr);
		break;
	case SOAP_TYPE_string:
		soap_serialize_string(soap, (char*const*)(void*)&ptr);
		break;
	}
}
#ifdef __cplusplus
}
#endif
#endif

#ifdef __cplusplus
extern "C" {
#endif

SOAP_FMAC3 void * SOAP_FMAC4 soap_dupelement(struct soap *soap, const void *ptr, int type)
{(void)soap; (void)ptr; (void)type; /* appease -Wall -Werror */
	return NULL;
}
#ifdef __cplusplus
}
#endif

#ifdef __cplusplus
extern "C" {
#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_delelement(const void *ptr, int type)
{(void)ptr; (void)type; /* appease -Wall -Werror */
}
#ifdef __cplusplus
}
#endif

SOAP_FMAC3 void * SOAP_FMAC4 soap_instantiate(struct soap *soap, int t, const char *type, const char *arrayType, size_t *n)
{	(void)type;
	switch (t)
	{
	case SOAP_TYPE_std__string:
		return (void*)soap_instantiate_std__string(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns2__TMyEmployee:
		return (void*)soap_instantiate_ns2__TMyEmployee(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns2__TPilotData:
		return (void*)soap_instantiate_ns2__TPilotData(soap, -1, type, arrayType, n);
	case SOAP_TYPE_TDoubleArray:
		return (void*)soap_instantiate_TDoubleArray(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns3__echoEnumResponse:
		return (void*)soap_instantiate_ns3__echoEnumResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns3__echoEnum:
		return (void*)soap_instantiate_ns3__echoEnum(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns3__echoDoubleArrayResponse:
		return (void*)soap_instantiate_ns3__echoDoubleArrayResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns3__echoDoubleArray:
		return (void*)soap_instantiate_ns3__echoDoubleArray(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns3__echoMyEmployeeResponse:
		return (void*)soap_instantiate_ns3__echoMyEmployeeResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns3__echoMyEmployee:
		return (void*)soap_instantiate_ns3__echoMyEmployee(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns3__echoDoubleResponse:
		return (void*)soap_instantiate_ns3__echoDoubleResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns3__echoDouble:
		return (void*)soap_instantiate_ns3__echoDouble(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns3__echoPilotDataResponse:
		return (void*)soap_instantiate_ns3__echoPilotDataResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns3__echoPilotData:
		return (void*)soap_instantiate_ns3__echoPilotData(soap, -1, type, arrayType, n);
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Header:
		return (void*)soap_instantiate_SOAP_ENV__Header(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Code:
		return (void*)soap_instantiate_SOAP_ENV__Code(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Detail:
		return (void*)soap_instantiate_SOAP_ENV__Detail(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Reason:
		return (void*)soap_instantiate_SOAP_ENV__Reason(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Fault:
		return (void*)soap_instantiate_SOAP_ENV__Fault(soap, -1, type, arrayType, n);
#endif
	}
	return NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_fdelete(struct soap *soap, struct soap_clist *p)
{
	(void)soap; /* appease -Wall -Werror */
	if (!p->ptr)
		return SOAP_OK;
	switch (p->type)
	{
	case SOAP_TYPE_std__string:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::string*>(p->ptr), std::string);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::string*>(p->ptr), std::string);
		break;
	case SOAP_TYPE_ns2__TMyEmployee:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<ns2__TMyEmployee*>(p->ptr), ns2__TMyEmployee);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<ns2__TMyEmployee*>(p->ptr), ns2__TMyEmployee);
		break;
	case SOAP_TYPE_ns2__TPilotData:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<ns2__TPilotData*>(p->ptr), ns2__TPilotData);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<ns2__TPilotData*>(p->ptr), ns2__TPilotData);
		break;
	case SOAP_TYPE_TDoubleArray:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<TDoubleArray*>(p->ptr), TDoubleArray);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<TDoubleArray*>(p->ptr), TDoubleArray);
		break;
	case SOAP_TYPE_ns3__echoEnumResponse:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct ns3__echoEnumResponse*>(p->ptr), struct ns3__echoEnumResponse);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct ns3__echoEnumResponse*>(p->ptr), struct ns3__echoEnumResponse);
		break;
	case SOAP_TYPE_ns3__echoEnum:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct ns3__echoEnum*>(p->ptr), struct ns3__echoEnum);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct ns3__echoEnum*>(p->ptr), struct ns3__echoEnum);
		break;
	case SOAP_TYPE_ns3__echoDoubleArrayResponse:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct ns3__echoDoubleArrayResponse*>(p->ptr), struct ns3__echoDoubleArrayResponse);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct ns3__echoDoubleArrayResponse*>(p->ptr), struct ns3__echoDoubleArrayResponse);
		break;
	case SOAP_TYPE_ns3__echoDoubleArray:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct ns3__echoDoubleArray*>(p->ptr), struct ns3__echoDoubleArray);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct ns3__echoDoubleArray*>(p->ptr), struct ns3__echoDoubleArray);
		break;
	case SOAP_TYPE_ns3__echoMyEmployeeResponse:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct ns3__echoMyEmployeeResponse*>(p->ptr), struct ns3__echoMyEmployeeResponse);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct ns3__echoMyEmployeeResponse*>(p->ptr), struct ns3__echoMyEmployeeResponse);
		break;
	case SOAP_TYPE_ns3__echoMyEmployee:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct ns3__echoMyEmployee*>(p->ptr), struct ns3__echoMyEmployee);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct ns3__echoMyEmployee*>(p->ptr), struct ns3__echoMyEmployee);
		break;
	case SOAP_TYPE_ns3__echoDoubleResponse:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct ns3__echoDoubleResponse*>(p->ptr), struct ns3__echoDoubleResponse);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct ns3__echoDoubleResponse*>(p->ptr), struct ns3__echoDoubleResponse);
		break;
	case SOAP_TYPE_ns3__echoDouble:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct ns3__echoDouble*>(p->ptr), struct ns3__echoDouble);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct ns3__echoDouble*>(p->ptr), struct ns3__echoDouble);
		break;
	case SOAP_TYPE_ns3__echoPilotDataResponse:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct ns3__echoPilotDataResponse*>(p->ptr), struct ns3__echoPilotDataResponse);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct ns3__echoPilotDataResponse*>(p->ptr), struct ns3__echoPilotDataResponse);
		break;
	case SOAP_TYPE_ns3__echoPilotData:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct ns3__echoPilotData*>(p->ptr), struct ns3__echoPilotData);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct ns3__echoPilotData*>(p->ptr), struct ns3__echoPilotData);
		break;
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Header:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct SOAP_ENV__Header*>(p->ptr), struct SOAP_ENV__Header);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct SOAP_ENV__Header*>(p->ptr), struct SOAP_ENV__Header);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Code:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct SOAP_ENV__Code*>(p->ptr), struct SOAP_ENV__Code);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct SOAP_ENV__Code*>(p->ptr), struct SOAP_ENV__Code);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Detail:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct SOAP_ENV__Detail*>(p->ptr), struct SOAP_ENV__Detail);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct SOAP_ENV__Detail*>(p->ptr), struct SOAP_ENV__Detail);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Reason:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct SOAP_ENV__Reason*>(p->ptr), struct SOAP_ENV__Reason);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct SOAP_ENV__Reason*>(p->ptr), struct SOAP_ENV__Reason);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Fault:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct SOAP_ENV__Fault*>(p->ptr), struct SOAP_ENV__Fault);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct SOAP_ENV__Fault*>(p->ptr), struct SOAP_ENV__Fault);
		break;
#endif
	default:
		return SOAP_ERR;
	}
	return SOAP_OK;
}

#ifdef WIN32
#pragma warning(push)
// do not warn on switch w/o cases
#pragma warning(disable:4065)
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_fbase(int t, int b)
{
	(void)t; (void)b; /* appease -Wall -Werror */
	return 0;
}
#ifdef WIN32
#pragma warning(pop)
#endif

#ifndef WITH_NOIDREF
#ifdef WIN32
#pragma warning(push)
// do not warn on switch w/o cases
#pragma warning(disable:4065)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_finsert(struct soap *soap, int t, int tt, void *p, size_t index, const void *q, void **x)
{
	(void)soap; (void)t; (void)p; (void)index; (void)q; (void)x; /* appease -Wall -Werror */
	switch (tt)
	{
	case SOAP_TYPE_std__string:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy std::string type=%d location=%p object=%p\n", t, p, q));
		*(std::string*)p = *(std::string*)q;
		break;
	case SOAP_TYPE_ns2__TMyEmployee:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy ns2__TMyEmployee type=%d location=%p object=%p\n", t, p, q));
		*(ns2__TMyEmployee*)p = *(ns2__TMyEmployee*)q;
		break;
	case SOAP_TYPE_ns2__TPilotData:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy ns2__TPilotData type=%d location=%p object=%p\n", t, p, q));
		*(ns2__TPilotData*)p = *(ns2__TPilotData*)q;
		break;
	case SOAP_TYPE_TDoubleArray:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy TDoubleArray type=%d location=%p object=%p\n", t, p, q));
		*(TDoubleArray*)p = *(TDoubleArray*)q;
		break;
	case SOAP_TYPE_ns3__echoEnumResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct ns3__echoEnumResponse type=%d location=%p object=%p\n", t, p, q));
		*(struct ns3__echoEnumResponse*)p = *(struct ns3__echoEnumResponse*)q;
		break;
	case SOAP_TYPE_ns3__echoEnum:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct ns3__echoEnum type=%d location=%p object=%p\n", t, p, q));
		*(struct ns3__echoEnum*)p = *(struct ns3__echoEnum*)q;
		break;
	case SOAP_TYPE_ns3__echoDoubleArrayResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct ns3__echoDoubleArrayResponse type=%d location=%p object=%p\n", t, p, q));
		*(struct ns3__echoDoubleArrayResponse*)p = *(struct ns3__echoDoubleArrayResponse*)q;
		break;
	case SOAP_TYPE_ns3__echoDoubleArray:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct ns3__echoDoubleArray type=%d location=%p object=%p\n", t, p, q));
		*(struct ns3__echoDoubleArray*)p = *(struct ns3__echoDoubleArray*)q;
		break;
	case SOAP_TYPE_ns3__echoMyEmployeeResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct ns3__echoMyEmployeeResponse type=%d location=%p object=%p\n", t, p, q));
		*(struct ns3__echoMyEmployeeResponse*)p = *(struct ns3__echoMyEmployeeResponse*)q;
		break;
	case SOAP_TYPE_ns3__echoMyEmployee:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct ns3__echoMyEmployee type=%d location=%p object=%p\n", t, p, q));
		*(struct ns3__echoMyEmployee*)p = *(struct ns3__echoMyEmployee*)q;
		break;
	case SOAP_TYPE_ns3__echoDoubleResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct ns3__echoDoubleResponse type=%d location=%p object=%p\n", t, p, q));
		*(struct ns3__echoDoubleResponse*)p = *(struct ns3__echoDoubleResponse*)q;
		break;
	case SOAP_TYPE_ns3__echoDouble:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct ns3__echoDouble type=%d location=%p object=%p\n", t, p, q));
		*(struct ns3__echoDouble*)p = *(struct ns3__echoDouble*)q;
		break;
	case SOAP_TYPE_ns3__echoPilotDataResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct ns3__echoPilotDataResponse type=%d location=%p object=%p\n", t, p, q));
		*(struct ns3__echoPilotDataResponse*)p = *(struct ns3__echoPilotDataResponse*)q;
		break;
	case SOAP_TYPE_ns3__echoPilotData:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct ns3__echoPilotData type=%d location=%p object=%p\n", t, p, q));
		*(struct ns3__echoPilotData*)p = *(struct ns3__echoPilotData*)q;
		break;
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Header:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct SOAP_ENV__Header type=%d location=%p object=%p\n", t, p, q));
		*(struct SOAP_ENV__Header*)p = *(struct SOAP_ENV__Header*)q;
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Code:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct SOAP_ENV__Code type=%d location=%p object=%p\n", t, p, q));
		*(struct SOAP_ENV__Code*)p = *(struct SOAP_ENV__Code*)q;
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Detail:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct SOAP_ENV__Detail type=%d location=%p object=%p\n", t, p, q));
		*(struct SOAP_ENV__Detail*)p = *(struct SOAP_ENV__Detail*)q;
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Reason:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct SOAP_ENV__Reason type=%d location=%p object=%p\n", t, p, q));
		*(struct SOAP_ENV__Reason*)p = *(struct SOAP_ENV__Reason*)q;
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Fault:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct SOAP_ENV__Fault type=%d location=%p object=%p\n", t, p, q));
		*(struct SOAP_ENV__Fault*)p = *(struct SOAP_ENV__Fault*)q;
		break;
#endif
	default:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Could not insert type=%d in %d\n", t, tt));
	}
}
#ifdef WIN32
#pragma warning(pop)
#endif
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap *soap, const char *tag, int id, const char *a, const char *type)
{
	if (!type)
		type = "xsd:byte";
	return soap_outbyte(soap, tag, id, a, type, SOAP_TYPE_byte);
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap *soap, const char *tag, char *a, const char *type)
{
	a = soap_inbyte(soap, tag, a, type, SOAP_TYPE_byte);
	return a;
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_new_byte(struct soap *soap, int n)
{
	char *a = static_cast<char *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(char)));
	for (char *p = a; p && n--; ++p)
		soap_default_byte(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap *soap, const char *a, const char *tag, const char *type)
{
	if (soap_out_byte(soap, tag ? tag : "byte", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap *soap, char *p, const char *tag, const char *type)
{
	if ((p = soap_in_byte(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap *soap, const char *tag, int id, const int *a, const char *type)
{
	if (!type)
		type = "xsd:int";
	return soap_outint(soap, tag, id, a, type, SOAP_TYPE_int);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap *soap, const char *tag, int *a, const char *type)
{
	a = soap_inint(soap, tag, a, type, SOAP_TYPE_int);
	return a;
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_new_int(struct soap *soap, int n)
{
	int *a = static_cast<int *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(int)));
	for (int *p = a; p && n--; ++p)
		soap_default_int(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap *soap, const int *a, const char *tag, const char *type)
{
	if (soap_out_int(soap, tag ? tag : "int", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap *soap, int *p, const char *tag, const char *type)
{
	if ((p = soap_in_int(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_double(struct soap *soap, const char *tag, int id, const double *a, const char *type)
{
	if (!type)
		type = "xsd:double";
	return soap_outdouble(soap, tag, id, a, type, SOAP_TYPE_double);
}

SOAP_FMAC3 double * SOAP_FMAC4 soap_in_double(struct soap *soap, const char *tag, double *a, const char *type)
{
	a = soap_indouble(soap, tag, a, type, SOAP_TYPE_double);
	return a;
}

SOAP_FMAC3 double * SOAP_FMAC4 soap_new_double(struct soap *soap, int n)
{
	double *a = static_cast<double *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(double)));
	for (double *p = a; p && n--; ++p)
		soap_default_double(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_double(struct soap *soap, const double *a, const char *tag, const char *type)
{
	if (soap_out_double(soap, tag ? tag : "double", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 double * SOAP_FMAC4 soap_get_double(struct soap *soap, double *p, const char *tag, const char *type)
{
	if ((p = soap_in_double(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

static const struct soap_code_map soap_codes_ns2__TEnumTest[] =
{	{ (LONG64)ns2__TEnumTest__etNone, "etNone" },
	{ (LONG64)ns2__TEnumTest__etAFew, "etAFew" },
	{ (LONG64)ns2__TEnumTest__etSome, "etSome" },
	{ (LONG64)ns2__TEnumTest__etAlot, "etAlot" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns2__TEnumTest2s(struct soap *soap, enum ns2__TEnumTest n)
{
	const char *s = soap_code_str(soap_codes_ns2__TEnumTest, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__TEnumTest(struct soap *soap, const char *tag, int id, const enum ns2__TEnumTest *a, const char *type)
{
	if (!type)
		type = "ns2:TEnumTest";
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns2__TEnumTest), type) || soap_send(soap, soap_ns2__TEnumTest2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns2__TEnumTest(struct soap *soap, const char *s, enum ns2__TEnumTest *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_ns2__TEnumTest, s);
	if (map)
		*a = (enum ns2__TEnumTest)map->code;
	else if (!*s)
		return soap->error = SOAP_EMPTY;
	else
	{	int n;
		if (soap_s2int(soap, s, &n) || n < 0 || n > 3)
			return soap->error = SOAP_TYPE;
		*a = (enum ns2__TEnumTest)n;
	}
	return SOAP_OK;
}

SOAP_FMAC3 enum ns2__TEnumTest * SOAP_FMAC4 soap_in_ns2__TEnumTest(struct soap *soap, const char *tag, enum ns2__TEnumTest *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (enum ns2__TEnumTest*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns2__TEnumTest, sizeof(enum ns2__TEnumTest), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (*soap->href != '#')
	{	int err = soap_s2ns2__TEnumTest(soap, soap_value(soap), a);
		if ((soap->body && soap_element_end_in(soap, tag)) || err)
			return NULL;
	}
	else
	{	a = (enum ns2__TEnumTest *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns2__TEnumTest, SOAP_TYPE_ns2__TEnumTest, sizeof(enum ns2__TEnumTest), 0, NULL, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 enum ns2__TEnumTest * SOAP_FMAC4 soap_new_ns2__TEnumTest(struct soap *soap, int n)
{
	enum ns2__TEnumTest *a = static_cast<enum ns2__TEnumTest *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(enum ns2__TEnumTest)));
	for (enum ns2__TEnumTest *p = a; p && n--; ++p)
		soap_default_ns2__TEnumTest(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__TEnumTest(struct soap *soap, const enum ns2__TEnumTest *a, const char *tag, const char *type)
{
	if (soap_out_ns2__TEnumTest(soap, tag ? tag : "ns2:TEnumTest", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 enum ns2__TEnumTest * SOAP_FMAC4 soap_get_ns2__TEnumTest(struct soap *soap, enum ns2__TEnumTest *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns2__TEnumTest(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__string(struct soap *soap, const std::string *a)
{	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__string(struct soap *soap, const char *tag, int id, const std::string *s, const char *type)
{
	if ((soap->mode & SOAP_C_NILSTRING) && s->empty())
		return soap_element_null(soap, tag, id, type);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, s, SOAP_TYPE_std__string), type) || soap_string_out(soap, s->c_str(), 0) || soap_element_end_out(soap, tag))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_std__string(struct soap *soap, const char *tag, std::string *s, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!s)
		s = soap_new_std__string(soap, -1);
	if (soap->null)
		if (s)
			s->erase();
	if (soap->body && *soap->href != '#')
	{	char *t;
		s = (std::string*)soap_id_enter(soap, soap->id, s, SOAP_TYPE_std__string, sizeof(std::string), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
		if (s)
		{	if (!(t = soap_string_in(soap, 1, 0, -1, NULL)))
				return NULL;
			s->assign(t);
		}
	}
	else
		s = (std::string*)soap_id_forward(soap, soap->href, soap_id_enter(soap, soap->id, s, SOAP_TYPE_std__string, sizeof(std::string), soap->type, soap->arrayType, soap_instantiate, soap_fbase), 0, SOAP_TYPE_std__string, SOAP_TYPE_std__string, sizeof(std::string), 0, soap_finsert, NULL);
	if (soap->body && soap_element_end_in(soap, tag))
		return NULL;
	return s;
}

SOAP_FMAC1 std::string * SOAP_FMAC2 soap_instantiate_std__string(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__string(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	std::string *p;
	size_t k = sizeof(std::string);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_std__string, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, std::string);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, std::string, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated std::string location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_std__string(struct soap *soap, const std::string *a, const char *tag, const char *type)
{
	if (soap_out_std__string(soap, tag ? tag : "string", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_std__string(struct soap *soap, std::string *p, const char *tag, const char *type)
{
	if ((p = soap_in_std__string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void ns2__TPilotData::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__string(soap, &this->ns2__TPilotData::SerialNumber);
	soap_default_std__string(soap, &this->ns2__TPilotData::DateTime);
	soap_default_std__string(soap, &this->ns2__TPilotData::Detect);
}

void ns2__TPilotData::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_std__string(soap, &this->ns2__TPilotData::SerialNumber);
	soap_serialize_std__string(soap, &this->ns2__TPilotData::DateTime);
	soap_serialize_std__string(soap, &this->ns2__TPilotData::Detect);
#endif
}

int ns2__TPilotData::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns2__TPilotData(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__TPilotData(struct soap *soap, const char *tag, int id, const ns2__TPilotData *a, const char *type)
{
	if (!type)
		type = "ns2:TPilotData";
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns2__TPilotData), type))
		return soap->error;
	if (soap_out_std__string(soap, "SerialNumber", -1, &a->ns2__TPilotData::SerialNumber, "xsd:string"))
		return soap->error;
	if (soap_out_std__string(soap, "DateTime", -1, &a->ns2__TPilotData::DateTime, "xsd:string"))
		return soap->error;
	if (soap_out_std__string(soap, "Detect", -1, &a->ns2__TPilotData::Detect, "xsd:string"))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ns2__TPilotData::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in_ns2__TPilotData(soap, tag, this, type);
}

SOAP_FMAC3 ns2__TPilotData * SOAP_FMAC4 soap_in_ns2__TPilotData(struct soap *soap, const char *tag, ns2__TPilotData *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns2__TPilotData*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns2__TPilotData, sizeof(ns2__TPilotData), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE_ns2__TPilotData)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (ns2__TPilotData *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_SerialNumber1 = 1;
	size_t soap_flag_DateTime1 = 1;
	size_t soap_flag_Detect1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SerialNumber1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_std__string(soap, "SerialNumber", &a->ns2__TPilotData::SerialNumber, "xsd:string"))
				{	soap_flag_SerialNumber1--;
					continue;
				}
			}
			if (soap_flag_DateTime1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_std__string(soap, "DateTime", &a->ns2__TPilotData::DateTime, "xsd:string"))
				{	soap_flag_DateTime1--;
					continue;
				}
			}
			if (soap_flag_Detect1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_std__string(soap, "Detect", &a->ns2__TPilotData::Detect, "xsd:string"))
				{	soap_flag_Detect1--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_SerialNumber1 > 0 || soap_flag_DateTime1 > 0 || soap_flag_Detect1 > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && *soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (ns2__TPilotData *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns2__TPilotData, SOAP_TYPE_ns2__TPilotData, sizeof(ns2__TPilotData), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 ns2__TPilotData * SOAP_FMAC2 soap_instantiate_ns2__TPilotData(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns2__TPilotData(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	ns2__TPilotData *p;
	size_t k = sizeof(ns2__TPilotData);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_ns2__TPilotData, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, ns2__TPilotData);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, ns2__TPilotData, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated ns2__TPilotData location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int ns2__TPilotData::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_ns2__TPilotData(soap, tag ? tag : "ns2:TPilotData", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns2__TPilotData::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns2__TPilotData(soap, this, tag, type);
}

SOAP_FMAC3 ns2__TPilotData * SOAP_FMAC4 soap_get_ns2__TPilotData(struct soap *soap, ns2__TPilotData *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns2__TPilotData(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void ns2__TMyEmployee::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__string(soap, &this->ns2__TMyEmployee::LastName);
	soap_default_std__string(soap, &this->ns2__TMyEmployee::FirstName);
	soap_default_double(soap, &this->ns2__TMyEmployee::Salary);
}

void ns2__TMyEmployee::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_std__string(soap, &this->ns2__TMyEmployee::LastName);
	soap_serialize_std__string(soap, &this->ns2__TMyEmployee::FirstName);
	soap_embedded(soap, &this->ns2__TMyEmployee::Salary, SOAP_TYPE_double);
#endif
}

int ns2__TMyEmployee::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns2__TMyEmployee(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__TMyEmployee(struct soap *soap, const char *tag, int id, const ns2__TMyEmployee *a, const char *type)
{
	if (!type)
		type = "ns2:TMyEmployee";
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns2__TMyEmployee), type))
		return soap->error;
	if (soap_out_std__string(soap, "LastName", -1, &a->ns2__TMyEmployee::LastName, "xsd:string"))
		return soap->error;
	if (soap_out_std__string(soap, "FirstName", -1, &a->ns2__TMyEmployee::FirstName, "xsd:string"))
		return soap->error;
	if (soap_out_double(soap, "Salary", -1, &a->ns2__TMyEmployee::Salary, "xsd:double"))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ns2__TMyEmployee::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in_ns2__TMyEmployee(soap, tag, this, type);
}

SOAP_FMAC3 ns2__TMyEmployee * SOAP_FMAC4 soap_in_ns2__TMyEmployee(struct soap *soap, const char *tag, ns2__TMyEmployee *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns2__TMyEmployee*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns2__TMyEmployee, sizeof(ns2__TMyEmployee), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE_ns2__TMyEmployee)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (ns2__TMyEmployee *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_LastName1 = 1;
	size_t soap_flag_FirstName1 = 1;
	size_t soap_flag_Salary1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_LastName1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_std__string(soap, "LastName", &a->ns2__TMyEmployee::LastName, "xsd:string"))
				{	soap_flag_LastName1--;
					continue;
				}
			}
			if (soap_flag_FirstName1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_std__string(soap, "FirstName", &a->ns2__TMyEmployee::FirstName, "xsd:string"))
				{	soap_flag_FirstName1--;
					continue;
				}
			}
			if (soap_flag_Salary1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_double(soap, "Salary", &a->ns2__TMyEmployee::Salary, "xsd:double"))
				{	soap_flag_Salary1--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_LastName1 > 0 || soap_flag_FirstName1 > 0 || soap_flag_Salary1 > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && *soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (ns2__TMyEmployee *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns2__TMyEmployee, SOAP_TYPE_ns2__TMyEmployee, sizeof(ns2__TMyEmployee), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 ns2__TMyEmployee * SOAP_FMAC2 soap_instantiate_ns2__TMyEmployee(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns2__TMyEmployee(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	ns2__TMyEmployee *p;
	size_t k = sizeof(ns2__TMyEmployee);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_ns2__TMyEmployee, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, ns2__TMyEmployee);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, ns2__TMyEmployee, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated ns2__TMyEmployee location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int ns2__TMyEmployee::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_ns2__TMyEmployee(soap, tag ? tag : "ns2:TMyEmployee", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns2__TMyEmployee::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns2__TMyEmployee(soap, this, tag, type);
}

SOAP_FMAC3 ns2__TMyEmployee * SOAP_FMAC4 soap_get_ns2__TMyEmployee(struct soap *soap, ns2__TMyEmployee *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns2__TMyEmployee(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void TDoubleArray::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->__ptr = NULL;
	this->__size = 0;
}

void TDoubleArray::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (this->__ptr && !soap_array_reference(soap, this, this->__ptr, this->__size, SOAP_TYPE_TDoubleArray))
	{	for (size_t i = 0; i < (size_t)this->__size; i++)
		{	soap_embedded(soap, this->__ptr + i, SOAP_TYPE_double);
		}
	}
#endif
}

int TDoubleArray::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_TDoubleArray(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_TDoubleArray(struct soap *soap, const char *tag, int id, const TDoubleArray *a, const char *type)
{
	int i, n = a->__size;
	char *t = a->__ptr ? soap_putsizesoffsets(soap, "xsd:double", &a->__size, NULL, 1) : NULL;
	id = soap_element_id(soap, tag, id, a, a->__ptr, a->__size, type, SOAP_TYPE_TDoubleArray, NULL);
	if (id < 0)
		return soap->error;
	if (soap_array_begin_out(soap, tag, id, t, NULL))
		return soap->error;
	for (i = 0; i < n; i++)
	{
		soap->position = 1;
		soap->positions[0] = i;
		if (soap_out_double(soap, "item", -1, &a->__ptr[i], "xsd:double"))
			return soap->error;
	}
	soap->position = 0;
	return soap_element_end_out(soap, tag);
}

void *TDoubleArray::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in_TDoubleArray(soap, tag, this, type);
}

SOAP_FMAC3 TDoubleArray * SOAP_FMAC4 soap_in_TDoubleArray(struct soap *soap, const char *tag, TDoubleArray *a, const char *type)
{
	int i, j;
	double *p;
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (soap_match_array(soap, type))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (TDoubleArray*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_TDoubleArray, sizeof(TDoubleArray), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	a->soap_default(soap);
	if (soap->body && *soap->href != '#')
	{
		if (*soap->arraySize)
		{
			soap_getsizes(soap->arraySize, &a->__size, 1);
			a->__size -= j = soap_getoffsets(soap->arrayOffset, &a->__size, NULL, 1);
			if ((size_t)a->__size > soap->maxoccurs)
			{	soap->error = SOAP_OCCURS;
				return NULL;
			}
			a->__ptr = (double *)soap_malloc(soap, sizeof(double) * a->__size);
			for (i = 0; i < a->__size; i++)
				soap_default_double(soap, a->__ptr+i);
			for (i = 0; i < a->__size; i++)
			{	soap_peek_element(soap);
				if (soap->position)
				{	i = soap->positions[0]-j;
					if (i < 0 || i >= a->__size)
					{	soap->error = SOAP_IOB;
						return NULL;
					}
				}
				if (!soap_in_double(soap, NULL, a->__ptr + i, "xsd:double"))
				{	if (soap->error != SOAP_NO_TAG)
						return NULL;
					soap->error = SOAP_OK;
					break;
				}
			}
		}
		else
		{	if (soap_alloc_block(soap) == NULL)
				return NULL;
			for (a->__size = 0; ; a->__size++)
			{	p = (double *)soap_push_block(soap, NULL, sizeof(double));
				if (!p)
					break;
				soap_default_double(soap, p);
				if (!soap_in_double(soap, NULL, p, "xsd:double"))
				{	if (soap->error == SOAP_NO_TAG)
						soap->error = SOAP_OK;
					soap_pop_block(soap, NULL);
					break;
				}
				if ((size_t)a->__size > soap->maxoccurs)
				{	soap->error = SOAP_OCCURS;
					return NULL;
				}
			}
			a->__ptr = (double *)soap_save_block(soap, NULL, NULL, 1);
		}
		if (soap->error || soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (TDoubleArray *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_TDoubleArray, SOAP_TYPE_TDoubleArray, sizeof(TDoubleArray), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 TDoubleArray * SOAP_FMAC2 soap_instantiate_TDoubleArray(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_TDoubleArray(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	TDoubleArray *p;
	size_t k = sizeof(TDoubleArray);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_TDoubleArray, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, TDoubleArray);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, TDoubleArray, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated TDoubleArray location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int TDoubleArray::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_TDoubleArray(soap, tag ? tag : "SOAP-ENC:Array", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *TDoubleArray::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_TDoubleArray(soap, this, tag, type);
}

SOAP_FMAC3 TDoubleArray * SOAP_FMAC4 soap_get_TDoubleArray(struct soap *soap, TDoubleArray *p, const char *tag, const char *type)
{
	if ((p = soap_in_TDoubleArray(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default__QName(soap, &a->faultcode);
	soap_default_string(soap, &a->faultstring);
	soap_default_string(soap, &a->faultactor);
	a->detail = NULL;
	a->SOAP_ENV__Code = NULL;
	a->SOAP_ENV__Reason = NULL;
	soap_default_string(soap, &a->SOAP_ENV__Node);
	soap_default_string(soap, &a->SOAP_ENV__Role);
	a->SOAP_ENV__Detail = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap *soap, const struct SOAP_ENV__Fault *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize__QName(soap, (char*const*)&a->faultcode);
	soap_serialize_string(soap, (char*const*)&a->faultstring);
	soap_serialize_string(soap, (char*const*)&a->faultactor);
	soap_serialize_PointerToSOAP_ENV__Detail(soap, &a->detail);
	soap_serialize_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Code);
	soap_serialize_PointerToSOAP_ENV__Reason(soap, &a->SOAP_ENV__Reason);
	soap_serialize_string(soap, (char*const*)&a->SOAP_ENV__Node);
	soap_serialize_string(soap, (char*const*)&a->SOAP_ENV__Role);
	soap_serialize_PointerToSOAP_ENV__Detail(soap, &a->SOAP_ENV__Detail);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Fault *a, const char *type)
{
	const char *soap_tmp_faultcode;
	soap_tmp_faultcode = soap_QName2s(soap, a->faultcode);
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Fault), type))
		return soap->error;
	if (soap_out__QName(soap, "faultcode", -1, (char*const*)(void*)&soap_tmp_faultcode, "xsd:QName"))
		return soap->error;
	if (soap_out_string(soap, "faultstring", -1, (char*const*)&a->faultstring, "xsd:string"))
		return soap->error;
	if (soap_out_string(soap, "faultactor", -1, (char*const*)&a->faultactor, "xsd:string"))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Detail(soap, "detail", -1, &a->detail, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", -1, &a->SOAP_ENV__Code, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Reason(soap, "SOAP-ENV:Reason", -1, &a->SOAP_ENV__Reason, ""))
		return soap->error;
	if (soap_out_string(soap, "SOAP-ENV:Node", -1, (char*const*)&a->SOAP_ENV__Node, "xsd:string"))
		return soap->error;
	if (soap_out_string(soap, "SOAP-ENV:Role", -1, (char*const*)&a->SOAP_ENV__Role, "xsd:string"))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", -1, &a->SOAP_ENV__Detail, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap *soap, const char *tag, struct SOAP_ENV__Fault *a, const char *type)
{
	size_t soap_flag_faultcode = 1;
	size_t soap_flag_faultstring = 1;
	size_t soap_flag_faultactor = 1;
	size_t soap_flag_detail = 1;
	size_t soap_flag_SOAP_ENV__Code = 1;
	size_t soap_flag_SOAP_ENV__Reason = 1;
	size_t soap_flag_SOAP_ENV__Node = 1;
	size_t soap_flag_SOAP_ENV__Role = 1;
	size_t soap_flag_SOAP_ENV__Detail = 1;
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	(void)type; /* appease -Wall -Werror */
	a = (struct SOAP_ENV__Fault*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Fault, sizeof(struct SOAP_ENV__Fault), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Fault(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_faultcode && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in__QName(soap, "faultcode", (char**)&a->faultcode, "xsd:QName"))
				{	soap_flag_faultcode--;
					continue;
				}
			}
			if (soap_flag_faultstring && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "faultstring", (char**)&a->faultstring, "xsd:string"))
				{	soap_flag_faultstring--;
					continue;
				}
			}
			if (soap_flag_faultactor && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "faultactor", (char**)&a->faultactor, "xsd:string"))
				{	soap_flag_faultactor--;
					continue;
				}
			}
			if (soap_flag_detail && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerToSOAP_ENV__Detail(soap, "detail", &a->detail, ""))
				{	soap_flag_detail--;
					continue;
				}
			}
			if (soap_flag_SOAP_ENV__Code && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", &a->SOAP_ENV__Code, ""))
				{	soap_flag_SOAP_ENV__Code--;
					continue;
				}
			}
			if (soap_flag_SOAP_ENV__Reason && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerToSOAP_ENV__Reason(soap, "SOAP-ENV:Reason", &a->SOAP_ENV__Reason, ""))
				{	soap_flag_SOAP_ENV__Reason--;
					continue;
				}
			}
			if (soap_flag_SOAP_ENV__Node && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "SOAP-ENV:Node", (char**)&a->SOAP_ENV__Node, "xsd:string"))
				{	soap_flag_SOAP_ENV__Node--;
					continue;
				}
			}
			if (soap_flag_SOAP_ENV__Role && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "SOAP-ENV:Role", (char**)&a->SOAP_ENV__Role, "xsd:string"))
				{	soap_flag_SOAP_ENV__Role--;
					continue;
				}
			}
			if (soap_flag_SOAP_ENV__Detail && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", &a->SOAP_ENV__Detail, ""))
				{	soap_flag_SOAP_ENV__Detail--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Fault *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Fault, SOAP_TYPE_SOAP_ENV__Fault, sizeof(struct SOAP_ENV__Fault), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct SOAP_ENV__Fault * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Fault(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct SOAP_ENV__Fault *p;
	size_t k = sizeof(struct SOAP_ENV__Fault);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_SOAP_ENV__Fault, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct SOAP_ENV__Fault);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct SOAP_ENV__Fault, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct SOAP_ENV__Fault location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap *soap, const struct SOAP_ENV__Fault *a, const char *tag, const char *type)
{
	if (soap_out_SOAP_ENV__Fault(soap, tag ? tag : "SOAP-ENV:Fault", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Fault(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_string(soap, &a->SOAP_ENV__Text);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Reason(struct soap *soap, const struct SOAP_ENV__Reason *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_string(soap, (char*const*)&a->SOAP_ENV__Text);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Reason(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Reason *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Reason), type))
		return soap->error;
	if (soap->lang)
		soap_set_attr(soap, "xml:lang", soap->lang, 1);
	if (soap_out_string(soap, "SOAP-ENV:Text", -1, (char*const*)&a->SOAP_ENV__Text, "xsd:string"))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_in_SOAP_ENV__Reason(struct soap *soap, const char *tag, struct SOAP_ENV__Reason *a, const char *type)
{
	size_t soap_flag_SOAP_ENV__Text = 1;
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	(void)type; /* appease -Wall -Werror */
	a = (struct SOAP_ENV__Reason*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Reason(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SOAP_ENV__Text && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "SOAP-ENV:Text", (char**)&a->SOAP_ENV__Text, "xsd:string"))
				{	soap_flag_SOAP_ENV__Text--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Reason *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Reason, SOAP_TYPE_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct SOAP_ENV__Reason * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Reason(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct SOAP_ENV__Reason *p;
	size_t k = sizeof(struct SOAP_ENV__Reason);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_SOAP_ENV__Reason, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct SOAP_ENV__Reason);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct SOAP_ENV__Reason, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct SOAP_ENV__Reason location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Reason(struct soap *soap, const struct SOAP_ENV__Reason *a, const char *tag, const char *type)
{
	if (soap_out_SOAP_ENV__Reason(soap, tag ? tag : "SOAP-ENV:Reason", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_get_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Reason(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->__any = NULL;
	a->__type = 0;
	a->fault = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap *soap, const struct SOAP_ENV__Detail *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_markelement(soap, a->fault, a->__type);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Detail *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Detail), type))
		return soap->error;
	if (soap_outliteral(soap, "-any", (char*const*)&a->__any, NULL))
		return soap->error;
	if (soap_putelement(soap, a->fault, "fault", -1, a->__type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap *soap, const char *tag, struct SOAP_ENV__Detail *a, const char *type)
{
	size_t soap_flag___any = 1;
	size_t soap_flag_fault = 1;
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	(void)type; /* appease -Wall -Werror */
	a = (struct SOAP_ENV__Detail*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Detail(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_fault && soap->error == SOAP_TAG_MISMATCH)
			{	if ((a->fault = soap_getelement(soap, "fault", &a->__type)))
				{	soap_flag_fault = 0;
					continue;
				}
			}
			if (soap_flag___any && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_inliteral(soap, "-any", (char**)&a->__any))
				{	soap_flag___any--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Detail *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Detail, SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct SOAP_ENV__Detail * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Detail(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct SOAP_ENV__Detail *p;
	size_t k = sizeof(struct SOAP_ENV__Detail);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_SOAP_ENV__Detail, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct SOAP_ENV__Detail);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct SOAP_ENV__Detail, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct SOAP_ENV__Detail location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap *soap, const struct SOAP_ENV__Detail *a, const char *tag, const char *type)
{
	if (soap_out_SOAP_ENV__Detail(soap, tag ? tag : "SOAP-ENV:Detail", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Detail(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default__QName(soap, &a->SOAP_ENV__Value);
	a->SOAP_ENV__Subcode = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap *soap, const struct SOAP_ENV__Code *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize__QName(soap, (char*const*)&a->SOAP_ENV__Value);
	soap_serialize_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Subcode);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Code *a, const char *type)
{
	const char *soap_tmp_SOAP_ENV__Value;
	soap_tmp_SOAP_ENV__Value = soap_QName2s(soap, a->SOAP_ENV__Value);
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Code), type))
		return soap->error;
	if (soap_out__QName(soap, "SOAP-ENV:Value", -1, (char*const*)(void*)&soap_tmp_SOAP_ENV__Value, "xsd:QName"))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Subcode", -1, &a->SOAP_ENV__Subcode, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code *a, const char *type)
{
	size_t soap_flag_SOAP_ENV__Value = 1;
	size_t soap_flag_SOAP_ENV__Subcode = 1;
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	(void)type; /* appease -Wall -Werror */
	a = (struct SOAP_ENV__Code*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Code(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SOAP_ENV__Value && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in__QName(soap, "SOAP-ENV:Value", (char**)&a->SOAP_ENV__Value, "xsd:QName"))
				{	soap_flag_SOAP_ENV__Value--;
					continue;
				}
			}
			if (soap_flag_SOAP_ENV__Subcode && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Subcode", &a->SOAP_ENV__Subcode, ""))
				{	soap_flag_SOAP_ENV__Subcode--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Code *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Code, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct SOAP_ENV__Code * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Code(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct SOAP_ENV__Code *p;
	size_t k = sizeof(struct SOAP_ENV__Code);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_SOAP_ENV__Code, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct SOAP_ENV__Code);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct SOAP_ENV__Code, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct SOAP_ENV__Code location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap *soap, const struct SOAP_ENV__Code *a, const char *tag, const char *type)
{
	if (soap_out_SOAP_ENV__Code(soap, tag ? tag : "SOAP-ENV:Code", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Code(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap *soap, const struct SOAP_ENV__Header *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Header *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Header), type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap *soap, const char *tag, struct SOAP_ENV__Header *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	(void)type; /* appease -Wall -Werror */
	a = (struct SOAP_ENV__Header*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Header, sizeof(struct SOAP_ENV__Header), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Header(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Header *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Header, SOAP_TYPE_SOAP_ENV__Header, sizeof(struct SOAP_ENV__Header), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct SOAP_ENV__Header * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Header(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct SOAP_ENV__Header *p;
	size_t k = sizeof(struct SOAP_ENV__Header);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_SOAP_ENV__Header, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct SOAP_ENV__Header);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct SOAP_ENV__Header, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct SOAP_ENV__Header location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap *soap, const struct SOAP_ENV__Header *a, const char *tag, const char *type)
{
	if (soap_out_SOAP_ENV__Header(soap, tag ? tag : "SOAP-ENV:Header", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Header(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns3__echoPilotData(struct soap *soap, struct ns3__echoPilotData *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns3__echoPilotData(struct soap *soap, const struct ns3__echoPilotData *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__echoPilotData(struct soap *soap, const char *tag, int id, const struct ns3__echoPilotData *a, const char *type)
{
	if (!type)
		type = "ns3:echoPilotData";
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns3__echoPilotData), type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns3__echoPilotData * SOAP_FMAC4 soap_in_ns3__echoPilotData(struct soap *soap, const char *tag, struct ns3__echoPilotData *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	(void)type; /* appease -Wall -Werror */
	a = (struct ns3__echoPilotData*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns3__echoPilotData, sizeof(struct ns3__echoPilotData), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns3__echoPilotData(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns3__echoPilotData *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns3__echoPilotData, SOAP_TYPE_ns3__echoPilotData, sizeof(struct ns3__echoPilotData), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct ns3__echoPilotData * SOAP_FMAC2 soap_instantiate_ns3__echoPilotData(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns3__echoPilotData(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct ns3__echoPilotData *p;
	size_t k = sizeof(struct ns3__echoPilotData);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_ns3__echoPilotData, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct ns3__echoPilotData);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct ns3__echoPilotData, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct ns3__echoPilotData location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns3__echoPilotData(struct soap *soap, const struct ns3__echoPilotData *a, const char *tag, const char *type)
{
	if (soap_out_ns3__echoPilotData(soap, tag ? tag : "ns3:echoPilotData", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns3__echoPilotData * SOAP_FMAC4 soap_get_ns3__echoPilotData(struct soap *soap, struct ns3__echoPilotData *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns3__echoPilotData(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns3__echoPilotDataResponse(struct soap *soap, struct ns3__echoPilotDataResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->return_ = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns3__echoPilotDataResponse(struct soap *soap, const struct ns3__echoPilotDataResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTons2__TPilotData(soap, &a->return_);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__echoPilotDataResponse(struct soap *soap, const char *tag, int id, const struct ns3__echoPilotDataResponse *a, const char *type)
{
	if (!type)
		type = "ns3:echoPilotDataResponse";
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns3__echoPilotDataResponse), type))
		return soap->error;
	if (soap_out_PointerTons2__TPilotData(soap, "return", -1, &a->return_, "ns2:TPilotData"))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns3__echoPilotDataResponse * SOAP_FMAC4 soap_in_ns3__echoPilotDataResponse(struct soap *soap, const char *tag, struct ns3__echoPilotDataResponse *a, const char *type)
{
	size_t soap_flag_return_ = 1;
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	(void)type; /* appease -Wall -Werror */
	a = (struct ns3__echoPilotDataResponse*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns3__echoPilotDataResponse, sizeof(struct ns3__echoPilotDataResponse), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns3__echoPilotDataResponse(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_return_ && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTons2__TPilotData(soap, "return", &a->return_, "ns2:TPilotData"))
				{	soap_flag_return_--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns3__echoPilotDataResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns3__echoPilotDataResponse, SOAP_TYPE_ns3__echoPilotDataResponse, sizeof(struct ns3__echoPilotDataResponse), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct ns3__echoPilotDataResponse * SOAP_FMAC2 soap_instantiate_ns3__echoPilotDataResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns3__echoPilotDataResponse(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct ns3__echoPilotDataResponse *p;
	size_t k = sizeof(struct ns3__echoPilotDataResponse);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_ns3__echoPilotDataResponse, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct ns3__echoPilotDataResponse);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct ns3__echoPilotDataResponse, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct ns3__echoPilotDataResponse location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns3__echoPilotDataResponse(struct soap *soap, const struct ns3__echoPilotDataResponse *a, const char *tag, const char *type)
{
	if (soap_out_ns3__echoPilotDataResponse(soap, tag ? tag : "ns3:echoPilotDataResponse", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns3__echoPilotDataResponse * SOAP_FMAC4 soap_get_ns3__echoPilotDataResponse(struct soap *soap, struct ns3__echoPilotDataResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns3__echoPilotDataResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns3__echoDouble(struct soap *soap, struct ns3__echoDouble *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_double(soap, &a->Value);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns3__echoDouble(struct soap *soap, const struct ns3__echoDouble *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_embedded(soap, &a->Value, SOAP_TYPE_double);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__echoDouble(struct soap *soap, const char *tag, int id, const struct ns3__echoDouble *a, const char *type)
{
	if (!type)
		type = "ns3:echoDouble";
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns3__echoDouble), type))
		return soap->error;
	if (soap_out_double(soap, "Value", -1, &a->Value, "xsd:double"))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns3__echoDouble * SOAP_FMAC4 soap_in_ns3__echoDouble(struct soap *soap, const char *tag, struct ns3__echoDouble *a, const char *type)
{
	size_t soap_flag_Value = 1;
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	(void)type; /* appease -Wall -Werror */
	a = (struct ns3__echoDouble*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns3__echoDouble, sizeof(struct ns3__echoDouble), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns3__echoDouble(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Value && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_double(soap, "Value", &a->Value, "xsd:double"))
				{	soap_flag_Value--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_Value > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && *soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (struct ns3__echoDouble *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns3__echoDouble, SOAP_TYPE_ns3__echoDouble, sizeof(struct ns3__echoDouble), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct ns3__echoDouble * SOAP_FMAC2 soap_instantiate_ns3__echoDouble(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns3__echoDouble(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct ns3__echoDouble *p;
	size_t k = sizeof(struct ns3__echoDouble);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_ns3__echoDouble, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct ns3__echoDouble);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct ns3__echoDouble, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct ns3__echoDouble location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns3__echoDouble(struct soap *soap, const struct ns3__echoDouble *a, const char *tag, const char *type)
{
	if (soap_out_ns3__echoDouble(soap, tag ? tag : "ns3:echoDouble", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns3__echoDouble * SOAP_FMAC4 soap_get_ns3__echoDouble(struct soap *soap, struct ns3__echoDouble *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns3__echoDouble(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns3__echoDoubleResponse(struct soap *soap, struct ns3__echoDoubleResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_double(soap, &a->return_);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns3__echoDoubleResponse(struct soap *soap, const struct ns3__echoDoubleResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_embedded(soap, &a->return_, SOAP_TYPE_double);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__echoDoubleResponse(struct soap *soap, const char *tag, int id, const struct ns3__echoDoubleResponse *a, const char *type)
{
	if (!type)
		type = "ns3:echoDoubleResponse";
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns3__echoDoubleResponse), type))
		return soap->error;
	if (soap_out_double(soap, "return", -1, &a->return_, "xsd:double"))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns3__echoDoubleResponse * SOAP_FMAC4 soap_in_ns3__echoDoubleResponse(struct soap *soap, const char *tag, struct ns3__echoDoubleResponse *a, const char *type)
{
	size_t soap_flag_return_ = 1;
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	(void)type; /* appease -Wall -Werror */
	a = (struct ns3__echoDoubleResponse*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns3__echoDoubleResponse, sizeof(struct ns3__echoDoubleResponse), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns3__echoDoubleResponse(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_return_ && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_double(soap, "return", &a->return_, "xsd:double"))
				{	soap_flag_return_--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_return_ > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && *soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (struct ns3__echoDoubleResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns3__echoDoubleResponse, SOAP_TYPE_ns3__echoDoubleResponse, sizeof(struct ns3__echoDoubleResponse), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct ns3__echoDoubleResponse * SOAP_FMAC2 soap_instantiate_ns3__echoDoubleResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns3__echoDoubleResponse(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct ns3__echoDoubleResponse *p;
	size_t k = sizeof(struct ns3__echoDoubleResponse);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_ns3__echoDoubleResponse, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct ns3__echoDoubleResponse);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct ns3__echoDoubleResponse, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct ns3__echoDoubleResponse location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns3__echoDoubleResponse(struct soap *soap, const struct ns3__echoDoubleResponse *a, const char *tag, const char *type)
{
	if (soap_out_ns3__echoDoubleResponse(soap, tag ? tag : "ns3:echoDoubleResponse", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns3__echoDoubleResponse * SOAP_FMAC4 soap_get_ns3__echoDoubleResponse(struct soap *soap, struct ns3__echoDoubleResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns3__echoDoubleResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns3__echoMyEmployee(struct soap *soap, struct ns3__echoMyEmployee *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->Value = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns3__echoMyEmployee(struct soap *soap, const struct ns3__echoMyEmployee *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTons2__TMyEmployee(soap, &a->Value);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__echoMyEmployee(struct soap *soap, const char *tag, int id, const struct ns3__echoMyEmployee *a, const char *type)
{
	if (!type)
		type = "ns3:echoMyEmployee";
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns3__echoMyEmployee), type))
		return soap->error;
	if (soap_out_PointerTons2__TMyEmployee(soap, "Value", -1, &a->Value, "ns2:TMyEmployee"))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns3__echoMyEmployee * SOAP_FMAC4 soap_in_ns3__echoMyEmployee(struct soap *soap, const char *tag, struct ns3__echoMyEmployee *a, const char *type)
{
	size_t soap_flag_Value = 1;
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	(void)type; /* appease -Wall -Werror */
	a = (struct ns3__echoMyEmployee*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns3__echoMyEmployee, sizeof(struct ns3__echoMyEmployee), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns3__echoMyEmployee(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Value && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTons2__TMyEmployee(soap, "Value", &a->Value, "ns2:TMyEmployee"))
				{	soap_flag_Value--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns3__echoMyEmployee *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns3__echoMyEmployee, SOAP_TYPE_ns3__echoMyEmployee, sizeof(struct ns3__echoMyEmployee), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct ns3__echoMyEmployee * SOAP_FMAC2 soap_instantiate_ns3__echoMyEmployee(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns3__echoMyEmployee(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct ns3__echoMyEmployee *p;
	size_t k = sizeof(struct ns3__echoMyEmployee);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_ns3__echoMyEmployee, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct ns3__echoMyEmployee);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct ns3__echoMyEmployee, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct ns3__echoMyEmployee location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns3__echoMyEmployee(struct soap *soap, const struct ns3__echoMyEmployee *a, const char *tag, const char *type)
{
	if (soap_out_ns3__echoMyEmployee(soap, tag ? tag : "ns3:echoMyEmployee", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns3__echoMyEmployee * SOAP_FMAC4 soap_get_ns3__echoMyEmployee(struct soap *soap, struct ns3__echoMyEmployee *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns3__echoMyEmployee(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns3__echoMyEmployeeResponse(struct soap *soap, struct ns3__echoMyEmployeeResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->return_ = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns3__echoMyEmployeeResponse(struct soap *soap, const struct ns3__echoMyEmployeeResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTons2__TMyEmployee(soap, &a->return_);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__echoMyEmployeeResponse(struct soap *soap, const char *tag, int id, const struct ns3__echoMyEmployeeResponse *a, const char *type)
{
	if (!type)
		type = "ns3:echoMyEmployeeResponse";
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns3__echoMyEmployeeResponse), type))
		return soap->error;
	if (soap_out_PointerTons2__TMyEmployee(soap, "return", -1, &a->return_, "ns2:TMyEmployee"))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns3__echoMyEmployeeResponse * SOAP_FMAC4 soap_in_ns3__echoMyEmployeeResponse(struct soap *soap, const char *tag, struct ns3__echoMyEmployeeResponse *a, const char *type)
{
	size_t soap_flag_return_ = 1;
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	(void)type; /* appease -Wall -Werror */
	a = (struct ns3__echoMyEmployeeResponse*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns3__echoMyEmployeeResponse, sizeof(struct ns3__echoMyEmployeeResponse), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns3__echoMyEmployeeResponse(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_return_ && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTons2__TMyEmployee(soap, "return", &a->return_, "ns2:TMyEmployee"))
				{	soap_flag_return_--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns3__echoMyEmployeeResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns3__echoMyEmployeeResponse, SOAP_TYPE_ns3__echoMyEmployeeResponse, sizeof(struct ns3__echoMyEmployeeResponse), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct ns3__echoMyEmployeeResponse * SOAP_FMAC2 soap_instantiate_ns3__echoMyEmployeeResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns3__echoMyEmployeeResponse(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct ns3__echoMyEmployeeResponse *p;
	size_t k = sizeof(struct ns3__echoMyEmployeeResponse);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_ns3__echoMyEmployeeResponse, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct ns3__echoMyEmployeeResponse);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct ns3__echoMyEmployeeResponse, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct ns3__echoMyEmployeeResponse location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns3__echoMyEmployeeResponse(struct soap *soap, const struct ns3__echoMyEmployeeResponse *a, const char *tag, const char *type)
{
	if (soap_out_ns3__echoMyEmployeeResponse(soap, tag ? tag : "ns3:echoMyEmployeeResponse", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns3__echoMyEmployeeResponse * SOAP_FMAC4 soap_get_ns3__echoMyEmployeeResponse(struct soap *soap, struct ns3__echoMyEmployeeResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns3__echoMyEmployeeResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns3__echoDoubleArray(struct soap *soap, struct ns3__echoDoubleArray *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->Value = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns3__echoDoubleArray(struct soap *soap, const struct ns3__echoDoubleArray *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerToTDoubleArray(soap, &a->Value);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__echoDoubleArray(struct soap *soap, const char *tag, int id, const struct ns3__echoDoubleArray *a, const char *type)
{
	if (!type)
		type = "ns3:echoDoubleArray";
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns3__echoDoubleArray), type))
		return soap->error;
	if (soap_out_PointerToTDoubleArray(soap, "Value", -1, &a->Value, "xsd:double"))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns3__echoDoubleArray * SOAP_FMAC4 soap_in_ns3__echoDoubleArray(struct soap *soap, const char *tag, struct ns3__echoDoubleArray *a, const char *type)
{
	size_t soap_flag_Value = 1;
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	(void)type; /* appease -Wall -Werror */
	a = (struct ns3__echoDoubleArray*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns3__echoDoubleArray, sizeof(struct ns3__echoDoubleArray), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns3__echoDoubleArray(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Value && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerToTDoubleArray(soap, "Value", &a->Value, "xsd:double"))
				{	soap_flag_Value--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns3__echoDoubleArray *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns3__echoDoubleArray, SOAP_TYPE_ns3__echoDoubleArray, sizeof(struct ns3__echoDoubleArray), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct ns3__echoDoubleArray * SOAP_FMAC2 soap_instantiate_ns3__echoDoubleArray(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns3__echoDoubleArray(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct ns3__echoDoubleArray *p;
	size_t k = sizeof(struct ns3__echoDoubleArray);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_ns3__echoDoubleArray, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct ns3__echoDoubleArray);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct ns3__echoDoubleArray, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct ns3__echoDoubleArray location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns3__echoDoubleArray(struct soap *soap, const struct ns3__echoDoubleArray *a, const char *tag, const char *type)
{
	if (soap_out_ns3__echoDoubleArray(soap, tag ? tag : "ns3:echoDoubleArray", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns3__echoDoubleArray * SOAP_FMAC4 soap_get_ns3__echoDoubleArray(struct soap *soap, struct ns3__echoDoubleArray *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns3__echoDoubleArray(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns3__echoDoubleArrayResponse(struct soap *soap, struct ns3__echoDoubleArrayResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->return_ = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns3__echoDoubleArrayResponse(struct soap *soap, const struct ns3__echoDoubleArrayResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerToTDoubleArray(soap, &a->return_);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__echoDoubleArrayResponse(struct soap *soap, const char *tag, int id, const struct ns3__echoDoubleArrayResponse *a, const char *type)
{
	if (!type)
		type = "ns3:echoDoubleArrayResponse";
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns3__echoDoubleArrayResponse), type))
		return soap->error;
	if (soap_out_PointerToTDoubleArray(soap, "return", -1, &a->return_, "xsd:double"))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns3__echoDoubleArrayResponse * SOAP_FMAC4 soap_in_ns3__echoDoubleArrayResponse(struct soap *soap, const char *tag, struct ns3__echoDoubleArrayResponse *a, const char *type)
{
	size_t soap_flag_return_ = 1;
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	(void)type; /* appease -Wall -Werror */
	a = (struct ns3__echoDoubleArrayResponse*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns3__echoDoubleArrayResponse, sizeof(struct ns3__echoDoubleArrayResponse), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns3__echoDoubleArrayResponse(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_return_ && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerToTDoubleArray(soap, "return", &a->return_, "xsd:double"))
				{	soap_flag_return_--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns3__echoDoubleArrayResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns3__echoDoubleArrayResponse, SOAP_TYPE_ns3__echoDoubleArrayResponse, sizeof(struct ns3__echoDoubleArrayResponse), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct ns3__echoDoubleArrayResponse * SOAP_FMAC2 soap_instantiate_ns3__echoDoubleArrayResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns3__echoDoubleArrayResponse(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct ns3__echoDoubleArrayResponse *p;
	size_t k = sizeof(struct ns3__echoDoubleArrayResponse);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_ns3__echoDoubleArrayResponse, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct ns3__echoDoubleArrayResponse);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct ns3__echoDoubleArrayResponse, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct ns3__echoDoubleArrayResponse location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns3__echoDoubleArrayResponse(struct soap *soap, const struct ns3__echoDoubleArrayResponse *a, const char *tag, const char *type)
{
	if (soap_out_ns3__echoDoubleArrayResponse(soap, tag ? tag : "ns3:echoDoubleArrayResponse", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns3__echoDoubleArrayResponse * SOAP_FMAC4 soap_get_ns3__echoDoubleArrayResponse(struct soap *soap, struct ns3__echoDoubleArrayResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns3__echoDoubleArrayResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns3__echoEnum(struct soap *soap, struct ns3__echoEnum *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_ns2__TEnumTest(soap, &a->Value);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns3__echoEnum(struct soap *soap, const struct ns3__echoEnum *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__echoEnum(struct soap *soap, const char *tag, int id, const struct ns3__echoEnum *a, const char *type)
{
	if (!type)
		type = "ns3:echoEnum";
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns3__echoEnum), type))
		return soap->error;
	if (soap_out_ns2__TEnumTest(soap, "Value", -1, &a->Value, "ns2:TEnumTest"))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns3__echoEnum * SOAP_FMAC4 soap_in_ns3__echoEnum(struct soap *soap, const char *tag, struct ns3__echoEnum *a, const char *type)
{
	size_t soap_flag_Value = 1;
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	(void)type; /* appease -Wall -Werror */
	a = (struct ns3__echoEnum*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns3__echoEnum, sizeof(struct ns3__echoEnum), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns3__echoEnum(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Value && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_ns2__TEnumTest(soap, "Value", &a->Value, "ns2:TEnumTest"))
				{	soap_flag_Value--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_Value > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && *soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (struct ns3__echoEnum *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns3__echoEnum, SOAP_TYPE_ns3__echoEnum, sizeof(struct ns3__echoEnum), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct ns3__echoEnum * SOAP_FMAC2 soap_instantiate_ns3__echoEnum(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns3__echoEnum(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct ns3__echoEnum *p;
	size_t k = sizeof(struct ns3__echoEnum);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_ns3__echoEnum, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct ns3__echoEnum);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct ns3__echoEnum, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct ns3__echoEnum location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns3__echoEnum(struct soap *soap, const struct ns3__echoEnum *a, const char *tag, const char *type)
{
	if (soap_out_ns3__echoEnum(soap, tag ? tag : "ns3:echoEnum", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns3__echoEnum * SOAP_FMAC4 soap_get_ns3__echoEnum(struct soap *soap, struct ns3__echoEnum *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns3__echoEnum(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns3__echoEnumResponse(struct soap *soap, struct ns3__echoEnumResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_ns2__TEnumTest(soap, &a->return_);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns3__echoEnumResponse(struct soap *soap, const struct ns3__echoEnumResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__echoEnumResponse(struct soap *soap, const char *tag, int id, const struct ns3__echoEnumResponse *a, const char *type)
{
	if (!type)
		type = "ns3:echoEnumResponse";
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns3__echoEnumResponse), type))
		return soap->error;
	if (soap_out_ns2__TEnumTest(soap, "return", -1, &a->return_, "ns2:TEnumTest"))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns3__echoEnumResponse * SOAP_FMAC4 soap_in_ns3__echoEnumResponse(struct soap *soap, const char *tag, struct ns3__echoEnumResponse *a, const char *type)
{
	size_t soap_flag_return_ = 1;
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	(void)type; /* appease -Wall -Werror */
	a = (struct ns3__echoEnumResponse*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns3__echoEnumResponse, sizeof(struct ns3__echoEnumResponse), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns3__echoEnumResponse(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_return_ && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_ns2__TEnumTest(soap, "return", &a->return_, "ns2:TEnumTest"))
				{	soap_flag_return_--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_return_ > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && *soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (struct ns3__echoEnumResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns3__echoEnumResponse, SOAP_TYPE_ns3__echoEnumResponse, sizeof(struct ns3__echoEnumResponse), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct ns3__echoEnumResponse * SOAP_FMAC2 soap_instantiate_ns3__echoEnumResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns3__echoEnumResponse(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct ns3__echoEnumResponse *p;
	size_t k = sizeof(struct ns3__echoEnumResponse);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_ns3__echoEnumResponse, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct ns3__echoEnumResponse);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct ns3__echoEnumResponse, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct ns3__echoEnumResponse location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns3__echoEnumResponse(struct soap *soap, const struct ns3__echoEnumResponse *a, const char *tag, const char *type)
{
	if (soap_out_ns3__echoEnumResponse(soap, tag ? tag : "ns3:echoEnumResponse", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns3__echoEnumResponse * SOAP_FMAC4 soap_get_ns3__echoEnumResponse(struct soap *soap, struct ns3__echoEnumResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns3__echoEnumResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Reason))
		soap_serialize_SOAP_ENV__Reason(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Reason(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Reason *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Reason, NULL);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Reason(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Reason(struct soap *soap, const char *tag, struct SOAP_ENV__Reason **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Reason **)soap_malloc(soap, sizeof(struct SOAP_ENV__Reason *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Reason(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Reason **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerToSOAP_ENV__Reason(soap, tag ? tag : "SOAP-ENV:Reason", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Reason(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Detail))
		soap_serialize_SOAP_ENV__Detail(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Detail *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Detail, NULL);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Detail(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap *soap, const char *tag, struct SOAP_ENV__Detail **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Detail **)soap_malloc(soap, sizeof(struct SOAP_ENV__Detail *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Detail(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Detail **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerToSOAP_ENV__Detail(soap, tag ? tag : "SOAP-ENV:Detail", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Detail(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Code))
		soap_serialize_SOAP_ENV__Code(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Code *const*a, const char *type)
{
	char *mark;
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Code, &mark);
	if (id < 0)
		return soap->error;
	(void)soap_out_SOAP_ENV__Code(soap, tag, id, *a, type);
	soap_unmark(soap, mark);
	return soap->error;
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Code **)soap_malloc(soap, sizeof(struct SOAP_ENV__Code *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Code(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Code **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerToSOAP_ENV__Code(soap, tag ? tag : "SOAP-ENV:Code", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Code(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__TPilotData(struct soap *soap, ns2__TPilotData *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns2__TPilotData))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__TPilotData(struct soap *soap, const char *tag, int id, ns2__TPilotData *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns2__TPilotData, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE_ns2__TPilotData ? type : NULL);
}

SOAP_FMAC3 ns2__TPilotData ** SOAP_FMAC4 soap_in_PointerTons2__TPilotData(struct soap *soap, const char *tag, ns2__TPilotData **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns2__TPilotData **)soap_malloc(soap, sizeof(ns2__TPilotData *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns2__TPilotData *)soap_instantiate_ns2__TPilotData(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (ns2__TPilotData **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns2__TPilotData, sizeof(ns2__TPilotData), 0, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__TPilotData(struct soap *soap, ns2__TPilotData *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTons2__TPilotData(soap, tag ? tag : "ns2:TPilotData", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns2__TPilotData ** SOAP_FMAC4 soap_get_PointerTons2__TPilotData(struct soap *soap, ns2__TPilotData **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons2__TPilotData(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__TMyEmployee(struct soap *soap, ns2__TMyEmployee *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns2__TMyEmployee))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__TMyEmployee(struct soap *soap, const char *tag, int id, ns2__TMyEmployee *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns2__TMyEmployee, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE_ns2__TMyEmployee ? type : NULL);
}

SOAP_FMAC3 ns2__TMyEmployee ** SOAP_FMAC4 soap_in_PointerTons2__TMyEmployee(struct soap *soap, const char *tag, ns2__TMyEmployee **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns2__TMyEmployee **)soap_malloc(soap, sizeof(ns2__TMyEmployee *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns2__TMyEmployee *)soap_instantiate_ns2__TMyEmployee(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (ns2__TMyEmployee **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns2__TMyEmployee, sizeof(ns2__TMyEmployee), 0, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__TMyEmployee(struct soap *soap, ns2__TMyEmployee *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTons2__TMyEmployee(soap, tag ? tag : "ns2:TMyEmployee", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns2__TMyEmployee ** SOAP_FMAC4 soap_get_PointerTons2__TMyEmployee(struct soap *soap, ns2__TMyEmployee **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons2__TMyEmployee(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToTDoubleArray(struct soap *soap, TDoubleArray *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (*a)
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToTDoubleArray(struct soap *soap, const char *tag, int id, TDoubleArray *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, *a ? (*a)->__ptr : NULL, *a ? (*a)->__size : 0, type, SOAP_TYPE_TDoubleArray, NULL);
	if (!*a || id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE_TDoubleArray ? type : NULL);
}

SOAP_FMAC3 TDoubleArray ** SOAP_FMAC4 soap_in_PointerToTDoubleArray(struct soap *soap, const char *tag, TDoubleArray **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (TDoubleArray **)soap_malloc(soap, sizeof(TDoubleArray *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (TDoubleArray *)soap_instantiate_TDoubleArray(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (TDoubleArray **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_TDoubleArray, sizeof(TDoubleArray), 0, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToTDoubleArray(struct soap *soap, TDoubleArray *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerToTDoubleArray(soap, tag ? tag : "SOAP-ENC:Array", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 TDoubleArray ** SOAP_FMAC4 soap_get_PointerToTDoubleArray(struct soap *soap, TDoubleArray **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToTDoubleArray(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTodouble(struct soap *soap, double *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	(void)soap_reference(soap, *a, SOAP_TYPE_double);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTodouble(struct soap *soap, const char *tag, int id, double *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_double, NULL);
	if (id < 0)
		return soap->error;
	return soap_out_double(soap, tag, id, *a, type);
}

SOAP_FMAC3 double ** SOAP_FMAC4 soap_in_PointerTodouble(struct soap *soap, const char *tag, double **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (double **)soap_malloc(soap, sizeof(double *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_double(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (double **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_double, sizeof(double), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTodouble(struct soap *soap, double *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTodouble(soap, tag ? tag : "double", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 double ** SOAP_FMAC4 soap_get_PointerTodouble(struct soap *soap, double **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTodouble(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__QName(struct soap *soap, char *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	(void)soap_reference(soap, *a, SOAP_TYPE__QName);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE__QName);
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap *soap, const char *tag, char **a, const char *type)
{
	a = soap_instring(soap, tag, a, type, SOAP_TYPE__QName, 2, 0, -1, NULL);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	if (soap_out__QName(soap, tag ? tag : "QName", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in__QName(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap *soap, char *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	(void)soap_reference(soap, *a, SOAP_TYPE_string);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE_string);
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap *soap, const char *tag, char **a, const char *type)
{
	a = soap_instring(soap, tag, a, type, SOAP_TYPE_string, 1, 0, -1, NULL);
	return a;
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_new_string(struct soap *soap, int n)
{
	char * *a = static_cast<char * *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(char *)));
	for (char * *p = a; p && n--; ++p)
		soap_default_string(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	if (soap_out_string(soap, tag ? tag : "string", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in_string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#if defined(__BORLANDC__)
#pragma option pop
#pragma option pop
#endif

/* End of soapC.cpp */
