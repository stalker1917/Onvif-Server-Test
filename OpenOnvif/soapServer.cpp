/* soapServer.cpp
   Generated by gSOAP 2.8.78 onvif.h

gSOAP XML Web services tools
Copyright (C) 2000-2018, Robert van Engelen, Genivia Inc. All Rights Reserved.
The soapcpp2 tool and its generated software are released under the GPL.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/
/*Modified by Rulin 2019 */


#if defined(__BORLANDC__)
#pragma option push -w-8060
#pragma option push -w-8004
#endif
#include "soapH.h"

SOAP_SOURCE_STAMP("@(#) soapServer.cpp ver 2.8.78 2019-02-04 13:36:32 GMT")
extern "C" SOAP_FMAC5 int SOAP_FMAC6 soap_serve(struct soap *soap)
{
#ifndef WITH_FASTCGI
	soap->keep_alive = soap->max_keep_alive + 1;
#endif
	do
	{
#ifndef WITH_FASTCGI
		if (soap->keep_alive > 0 && soap->max_keep_alive > 0)
			soap->keep_alive--;
#endif
		if (soap_begin_serve(soap))
		{	if (soap->error >= SOAP_STOP)
				continue;
			return soap->error;
		}
		if ((soap_serve_request(soap) || (soap->fserveloop && soap->fserveloop(soap))) && soap->error && soap->error < SOAP_STOP)
		{
#ifdef WITH_FASTCGI
			soap_send_fault(soap);
#else
			return soap_send_fault(soap);
#endif
		}
#ifdef WITH_FASTCGI
		soap_destroy(soap);
		soap_end(soap);
	} while (1);
#else
	} while (soap->keep_alive);
#endif
	return SOAP_OK;
}

#ifndef WITH_NOSERVEREQUEST
extern "C" SOAP_FMAC5 int SOAP_FMAC6 soap_serve_request(struct soap *soap)
{
	soap_peek_element(soap);
	if (!soap_match_tag(soap, soap->tag, "tds:GetSystemDateAndTime")|| !soap_match_tag(soap, soap->tag, "GetSystemDateAndTime"))
		return soap_serve___tds__GetSystemDateAndTime(soap);
	if (!soap_match_tag(soap, soap->tag, "tds:GetScopes" ))
		return soap_serve___tds__GetScopes(soap);
	if (!soap_match_tag(soap, soap->tag, "tds:GetCapabilities"))
		return soap_serve___tds__GetCapabilities(soap);
	if (!soap_match_tag(soap, soap->tag, "tds:GetNetworkInterfaces"))
		return soap_serve___tds__GetNetworkInterfaces(soap);
	if (!soap_match_tag(soap, soap->tag, "tds:GetDNS"))
		return soap_serve___tds__GetDNS(soap);
	if (!soap_match_tag(soap, soap->tag, "tds:GetDeviceInformation"))
		return soap_serve___tds__GetDeviceInformation(soap);

	return soap->error = SOAP_NO_METHOD;
}
#endif

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___tds__GetSystemDateAndTime(struct soap *soap)
{
	struct __tds__GetSystemDateAndTime soap_tmp___tds__GetSystemDateAndTime;
	struct _tds__GetSystemDateAndTimeResponse tds__GetSystemDateAndTimeResponse;
	soap_default__tds__GetSystemDateAndTimeResponse(soap, &tds__GetSystemDateAndTimeResponse);
	soap_default___tds__GetSystemDateAndTime(soap, &soap_tmp___tds__GetSystemDateAndTime);
	if (!soap_get___tds__GetSystemDateAndTime(soap, &soap_tmp___tds__GetSystemDateAndTime, "-tds:GetSystemDateAndTime", NULL))
		soap->error = SOAP_OK;
		//return soap->error;
	if (soap_body_end_in(soap)
		|| soap_envelope_end_in(soap)
		|| soap_end_recv(soap))
		return soap->error;
	soap->error = __tds__GetSystemDateAndTime(soap, soap_tmp___tds__GetSystemDateAndTime.tds__GetSystemDateAndTime, &tds__GetSystemDateAndTimeResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	soap_serialize__tds__GetSystemDateAndTimeResponse(soap, &tds__GetSystemDateAndTimeResponse);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{
		if (soap_envelope_begin_out(soap)
			|| soap_putheader(soap)
			|| soap_body_begin_out(soap)
			|| soap_put__tds__GetSystemDateAndTimeResponse(soap, &tds__GetSystemDateAndTimeResponse, "tds:GetSystemDateAndTimeResponse", "")
			|| soap_body_end_out(soap)
			|| soap_envelope_end_out(soap))
			return soap->error;
	};
	if (soap_end_count(soap)
		|| soap_response(soap, SOAP_OK)
		|| soap_envelope_begin_out(soap)
		|| soap_putheader(soap)
		|| soap_body_begin_out(soap)
		|| soap_put__tds__GetSystemDateAndTimeResponse(soap, &tds__GetSystemDateAndTimeResponse, "tds:GetSystemDateAndTimeResponse", "")
		|| soap_body_end_out(soap)
		|| soap_envelope_end_out(soap)
		|| soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___tds__GetScopes(struct soap *soap)
{
	struct __tds__GetScopes soap_tmp___tds__GetScopes;
	struct _tds__GetScopesResponse tds__GetScopesResponse;
	soap_default__tds__GetScopesResponse(soap, &tds__GetScopesResponse);
	soap_default___tds__GetScopes(soap, &soap_tmp___tds__GetScopes);
	if (!soap_get___tds__GetScopes(soap, &soap_tmp___tds__GetScopes, "-tds:GetScopes", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
		|| soap_envelope_end_in(soap)
		|| soap_end_recv(soap))
		return soap->error;
	soap->error = __tds__GetScopes(soap, soap_tmp___tds__GetScopes.tds__GetScopes, &tds__GetScopesResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	soap_serialize__tds__GetScopesResponse(soap, &tds__GetScopesResponse);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{
		if (soap_envelope_begin_out(soap)
			|| soap_putheader(soap)
			|| soap_body_begin_out(soap)
			|| soap_put__tds__GetScopesResponse(soap, &tds__GetScopesResponse, "tds:GetScopesResponse", "")
			|| soap_body_end_out(soap)
			|| soap_envelope_end_out(soap))
			return soap->error;
	};
	if (soap_end_count(soap)
		|| soap_response(soap, SOAP_OK)
		|| soap_envelope_begin_out(soap)
		|| soap_putheader(soap)
		|| soap_body_begin_out(soap)
		|| soap_put__tds__GetScopesResponse(soap, &tds__GetScopesResponse, "tds:GetScopesResponse", "")
		|| soap_body_end_out(soap)
		|| soap_envelope_end_out(soap)
		|| soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___tds__GetCapabilities(struct soap *soap)
{
	struct __tds__GetCapabilities soap_tmp___tds__GetCapabilities;
	struct _tds__GetCapabilitiesResponse tds__GetCapabilitiesResponse;
	soap_default__tds__GetCapabilitiesResponse(soap, &tds__GetCapabilitiesResponse);
	soap_default___tds__GetCapabilities(soap, &soap_tmp___tds__GetCapabilities);
	if (!soap_get___tds__GetCapabilities(soap, &soap_tmp___tds__GetCapabilities, "-tds:GetCapabilities", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
		|| soap_envelope_end_in(soap)
		|| soap_end_recv(soap))
		return soap->error;
	soap->error = __tds__GetCapabilities(soap, soap_tmp___tds__GetCapabilities.tds__GetCapabilities, &tds__GetCapabilitiesResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	soap_serialize__tds__GetCapabilitiesResponse(soap, &tds__GetCapabilitiesResponse);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{
		if (soap_envelope_begin_out(soap)
			|| soap_putheader(soap)
			|| soap_body_begin_out(soap)
			|| soap_put__tds__GetCapabilitiesResponse(soap, &tds__GetCapabilitiesResponse, "tds:GetCapabilitiesResponse", "")
			|| soap_body_end_out(soap)
			|| soap_envelope_end_out(soap))
			return soap->error;
	};
	if (soap_end_count(soap)
		|| soap_response(soap, SOAP_OK)
		|| soap_envelope_begin_out(soap)
		|| soap_putheader(soap)
		|| soap_body_begin_out(soap)
		|| soap_put__tds__GetCapabilitiesResponse(soap, &tds__GetCapabilitiesResponse, "tds:GetCapabilitiesResponse", "")
		|| soap_body_end_out(soap)
		|| soap_envelope_end_out(soap)
		|| soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___tds__GetDNS(struct soap *soap)
{
	struct __tds__GetDNS soap_tmp___tds__GetDNS;
	struct _tds__GetDNSResponse tds__GetDNSResponse;
	soap_default__tds__GetDNSResponse(soap, &tds__GetDNSResponse);
	soap_default___tds__GetDNS(soap, &soap_tmp___tds__GetDNS);
	if (!soap_get___tds__GetDNS(soap, &soap_tmp___tds__GetDNS, "-tds:GetDNS", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
		|| soap_envelope_end_in(soap)
		|| soap_end_recv(soap))
		return soap->error;
	soap->error = __tds__GetDNS(soap, soap_tmp___tds__GetDNS.tds__GetDNS, &tds__GetDNSResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	soap_serialize__tds__GetDNSResponse(soap, &tds__GetDNSResponse);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{
		if (soap_envelope_begin_out(soap)
			|| soap_putheader(soap)
			|| soap_body_begin_out(soap)
			|| soap_put__tds__GetDNSResponse(soap, &tds__GetDNSResponse, "tds:GetDNSResponse", "")
			|| soap_body_end_out(soap)
			|| soap_envelope_end_out(soap))
			return soap->error;
	};
	if (soap_end_count(soap)
		|| soap_response(soap, SOAP_OK)
		|| soap_envelope_begin_out(soap)
		|| soap_putheader(soap)
		|| soap_body_begin_out(soap)
		|| soap_put__tds__GetDNSResponse(soap, &tds__GetDNSResponse, "tds:GetDNSResponse", "")
		|| soap_body_end_out(soap)
		|| soap_envelope_end_out(soap)
		|| soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___tds__GetNetworkInterfaces(struct soap *soap)
{
	struct __tds__GetNetworkInterfaces soap_tmp___tds__GetNetworkInterfaces;
	struct _tds__GetNetworkInterfacesResponse tds__GetNetworkInterfacesResponse;
	soap_default__tds__GetNetworkInterfacesResponse(soap, &tds__GetNetworkInterfacesResponse);
	soap_default___tds__GetNetworkInterfaces(soap, &soap_tmp___tds__GetNetworkInterfaces);
	if (!soap_get___tds__GetNetworkInterfaces(soap, &soap_tmp___tds__GetNetworkInterfaces, "-tds:GetNetworkInterfaces", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
		|| soap_envelope_end_in(soap)
		|| soap_end_recv(soap))
		return soap->error;
	soap->error = __tds__GetNetworkInterfaces(soap, soap_tmp___tds__GetNetworkInterfaces.tds__GetNetworkInterfaces, &tds__GetNetworkInterfacesResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	soap_serialize__tds__GetNetworkInterfacesResponse(soap, &tds__GetNetworkInterfacesResponse);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{
		if (soap_envelope_begin_out(soap)
			|| soap_putheader(soap)
			|| soap_body_begin_out(soap)
			|| soap_put__tds__GetNetworkInterfacesResponse(soap, &tds__GetNetworkInterfacesResponse, "tds:GetNetworkInterfacesResponse", "")
			|| soap_body_end_out(soap)
			|| soap_envelope_end_out(soap))
			return soap->error;
	};
	if (soap_end_count(soap)
		|| soap_response(soap, SOAP_OK)
		|| soap_envelope_begin_out(soap)
		|| soap_putheader(soap)
		|| soap_body_begin_out(soap)
		|| soap_put__tds__GetNetworkInterfacesResponse(soap, &tds__GetNetworkInterfacesResponse, "tds:GetNetworkInterfacesResponse", "")
		|| soap_body_end_out(soap)
		|| soap_envelope_end_out(soap)
		|| soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}
SOAP_FMAC5 int SOAP_FMAC6 soap_serve___tds__GetDeviceInformation(struct soap *soap)
{
	struct __tds__GetDeviceInformation soap_tmp___tds__GetDeviceInformation;
	struct _tds__GetDeviceInformationResponse tds__GetDeviceInformationResponse;
	soap_default__tds__GetDeviceInformationResponse(soap, &tds__GetDeviceInformationResponse);
	soap_default___tds__GetDeviceInformation(soap, &soap_tmp___tds__GetDeviceInformation);
	if (!soap_get___tds__GetDeviceInformation(soap, &soap_tmp___tds__GetDeviceInformation, "-tds:GetDeviceInformation", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
		|| soap_envelope_end_in(soap)
		|| soap_end_recv(soap))
		return soap->error;
	soap->error = __tds__GetDeviceInformation(soap, soap_tmp___tds__GetDeviceInformation.tds__GetDeviceInformation, &tds__GetDeviceInformationResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	soap_serialize__tds__GetDeviceInformationResponse(soap, &tds__GetDeviceInformationResponse);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{
		if (soap_envelope_begin_out(soap)
			|| soap_putheader(soap)
			|| soap_body_begin_out(soap)
			|| soap_put__tds__GetDeviceInformationResponse(soap, &tds__GetDeviceInformationResponse, "tds:GetDeviceInformationResponse", "")
			|| soap_body_end_out(soap)
			|| soap_envelope_end_out(soap))
			return soap->error;
	};
	if (soap_end_count(soap)
		|| soap_response(soap, SOAP_OK)
		|| soap_envelope_begin_out(soap)
		|| soap_putheader(soap)
		|| soap_body_begin_out(soap)
		|| soap_put__tds__GetDeviceInformationResponse(soap, &tds__GetDeviceInformationResponse, "tds:GetDeviceInformationResponse", "")
		|| soap_body_end_out(soap)
		|| soap_envelope_end_out(soap)
		|| soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}





#if defined(__BORLANDC__)
#pragma option pop
#pragma option pop
#endif

/* End of soapServer.cpp */
